var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.107,1,2.366]],["body/modules/AppModule.html",[0,1.88,1,4.727,2,0.023,3,2.043,4,2.194,5,2.194,6,1.908,7,2.636,8,2.636,9,3.523,10,3.523,11,4.015,12,3.192,13,4.015,14,0.215,15,0.184,16,4.141,17,0.325,18,0.667,19,4.141,20,4.141,21,2.812,22,2.569,23,4.141,24,2.367,25,0.215,26,0.141,27,0.013,28,0.013]],["title/modules/AuthModule.html",[0,1.107,29,2.162]],["body/modules/AuthModule.html",[0,1.87,2,0.023,3,2.02,4,2.169,5,2.169,6,1.887,7,2.617,8,2.617,12,3.259,14,0.213,15,0.182,17,0.306,18,0.66,21,2.78,22,2.54,25,0.213,26,0.14,27,0.013,28,0.013,29,4.274,30,3.483,31,4.094,32,3.483,33,3.483,34,4.024,35,4.094,36,4.094]],["title/injectables/AuthService.html",[34,1.992,37,0.487]],["body/injectables/AuthService.html",[2,0.024,14,0.142,15,0.122,17,0.272,18,0.441,25,0.142,26,0.093,27,0.009,28,0.009,34,2.295,37,0.561,38,2.328,39,4.014,40,1.644,41,4.014,42,4.014,43,4.014,44,2.736,45,2.087,46,2.736,47,4.014,48,0.997,49,2.736,50,3.02,51,4.014,52,2.736,53,2.191,54,2.736,55,2.519,56,2.736,57,1.603,58,4.014,59,2.736,60,2.059,61,2.059,62,4.045,63,2.328,64,2.059,65,2.059,66,2.736,67,0.98,68,0.869,69,0.772,70,4.455,71,2.736,72,1.424,73,2.736,74,2.736,75,2.059,76,1.858,77,2.736,78,1.993,79,2.736,80,2.736,81,2.736,82,2.736,83,2.736,84,1.564,85,2.736,86,3.02,87,0.772,88,2.328,89,2.736,90,2.736,91,2.736,92,2.736,93,2.736,94,2.736,95,2.736,96,2.736]],["title/modules/ConnectionModule.html",[0,1.107,97,2.162]],["body/modules/ConnectionModule.html",[0,1.925,2,0.022,7,2.499,8,2.499,14,0.263,15,0.225,17,0.315,18,0.816,25,0.263,26,0.173,27,0.016,28,0.016,97,3.758,98,5.065,99,4.876,100,5.065]],["title/classes/Expression.html",[26,0.119,101,2.366]],["body/classes/Expression.html",[2,0.023,14,0.207,15,0.178,17,0.207,25,0.207,26,0.136,27,0.013,28,0.013,48,0.784,101,3.542,102,3.394,103,4.944,104,5.811,105,5.811,106,1.209,107,2.349,108,2.207,109,2.207,110,1.968,111,3.989,112,1.985,113,3.989,114,1.985,115,1.985,116,2.981,117,3.989,118,1.868,119,2.403,120,1.518,121,0.643,122,1.429]],["title/classes/ExpressionCollection.html",[26,0.119,123,2.622]],["body/classes/ExpressionCollection.html",[2,0.023,14,0.222,15,0.19,17,0.222,25,0.222,26,0.146,27,0.014,28,0.014,48,0.819,103,5.108,106,1.069,107,2.265,108,1.952,109,1.952,114,2.075,115,2.075,118,1.53,120,1.626,121,0.688,122,1.53,123,4.101,124,3.633,125,2.591,126,4.271,127,4.271,128,3.214,129,4.271,130,4.517,131,4.271,132,2.263]],["title/injectables/ExpressionService.html",[37,0.487,133,1.992]],["body/injectables/ExpressionService.html",[2,0.023,14,0.217,15,0.186,17,0.309,18,0.672,25,0.217,26,0.142,27,0.013,28,0.013,37,0.751,40,1.58,57,1.811,67,1.494,68,1.326,69,1.178,72,1.25,101,2.833,121,0.672,133,3.07,134,3.55,135,6.269,136,4.173,137,2.245,138,4.173,139,5.37,140,4.173,141,1.494,142,4.173,143,4.173,144,4.173]],["title/classes/Friendship.html",[26,0.119,145,2.622]],["body/classes/Friendship.html",[2,0.023,14,0.175,15,0.15,17,0.175,25,0.175,26,0.115,27,0.011,28,0.011,48,0.981,106,1.129,107,2.446,108,2.061,109,2.061,112,2.191,114,2.191,115,2.191,118,1.668,120,1.283,121,0.543,128,3.505,130,4.016,132,2.468,145,3.505,146,2.868,147,5.337,148,5.337,149,5.337,150,5.337,151,5.337,152,3.311,153,3.571,154,3.372,155,3.372,156,3.372,157,3.372,158,3.372,159,3.372]],["title/classes/Group.html",[26,0.119,160,2.162]],["body/classes/Group.html",[2,0.023,14,0.172,15,0.147,17,0.172,25,0.172,26,0.113,27,0.011,28,0.011,48,1.003,106,0.9,107,2.437,108,1.644,109,1.644,112,1.747,114,2.362,115,2.47,116,2.623,118,1.182,119,1.521,120,1.256,121,0.532,132,2.796,153,2.847,160,2.847,161,2.808,162,3.97,163,2.796,164,3.97,165,3.97,166,3.97,167,3.97,168,3.3,169,2.808,170,3.3,171,3.3,172,3.453,173,3.904,174,3.453,175,1.858,176,3.3,177,3.3,178,3.3,179,3.3,180,2.808]],["title/interfaces/GroupMes.html",[181,1.107,182,2.366]],["body/interfaces/GroupMes.html",[2,0.023,14,0.175,15,0.15,17,0.277,18,0.543,25,0.175,26,0.115,27,0.011,28,0.011,37,0.651,40,1.239,48,1.046,57,1.137,67,1.207,68,1.071,69,0.952,72,1.395,78,1.283,87,1.315,106,1.047,121,0.543,137,1.668,141,1.207,160,2.092,162,4.331,163,3.05,164,4.331,165,4.331,166,4.331,167,4.545,175,1.365,181,1.071,182,3.163,183,2.537,184,2.868,185,1.455,186,2.868,187,2.868,188,2.868,189,1.786,190,2.146,191,2.868,192,1.773,193,1.786,194,2.868,195,2.868]],["title/classes/GroupRelationship.html",[26,0.119,196,2.162]],["body/classes/GroupRelationship.html",[2,0.023,14,0.193,15,0.165,17,0.193,25,0.193,26,0.127,27,0.012,28,0.012,48,0.967,106,0.977,107,2.39,108,1.783,109,1.783,112,1.894,114,2.448,115,2.448,118,1.331,120,1.415,121,0.599,122,1.783,125,2.422,128,3.745,130,4.223,132,2.637,152,3.482,163,2.973,196,3.088,197,3.162,198,3.811,199,3.717,200,3.717,201,3.717,202,3.717,203,3.717]],["title/interfaces/GroupRelationshipMes.html",[181,1.107,204,2.366]],["body/interfaces/GroupRelationshipMes.html",[2,0.023,14,0.186,15,0.159,17,0.321,18,0.577,25,0.186,26,0.122,27,0.011,28,0.011,37,0.679,40,0.953,45,1.972,48,1.008,67,1.283,68,1.75,69,1.555,87,1.011,106,1.081,121,0.577,125,2.548,137,1.739,141,1.283,152,3.663,163,3.128,181,1.138,185,2.377,196,2.223,198,4.009,204,4.009,205,2.696,206,3.048,207,3.048,208,3.048,209,1.767,210,3.048,211,3.048,212,3.048,213,3.048,214,3.048,215,3.048]],["title/injectables/GroupRelationshipService.html",[37,0.487,209,1.718]],["body/injectables/GroupRelationshipService.html",[2,0.023,14,0.179,15,0.153,17,0.316,18,0.553,25,0.179,26,0.117,27,0.011,28,0.011,37,0.66,40,1.434,45,2.305,48,0.81,67,1.23,68,1.713,69,1.522,87,0.97,106,0.674,121,0.553,125,1.483,137,2.078,141,1.23,152,2.131,163,1.82,181,1.092,185,2.777,196,2.131,198,2.333,204,4.266,205,2.585,206,2.923,207,2.923,208,2.923,209,2.327,210,2.923,211,4.014,212,4.014,213,2.923,214,2.923,215,2.923,216,4.718,217,3.435,218,3.435,219,3.435]],["title/injectables/GroupService.html",[37,0.487,185,1.503]],["body/injectables/GroupService.html",[2,0.024,14,0.174,15,0.149,17,0.276,18,0.538,25,0.174,26,0.114,27,0.011,28,0.011,37,0.647,40,1.657,48,0.905,57,1.561,67,1.196,68,1.062,69,0.943,72,1.386,78,1.271,87,1.307,106,0.655,121,0.538,137,2.053,141,1.196,160,2.073,162,2.514,163,1.77,164,2.514,165,2.514,166,2.514,167,3.483,175,1.353,181,1.062,182,2.268,183,2.514,184,2.842,185,1.997,186,2.842,187,3.938,188,3.938,189,3.038,190,2.133,191,2.842,192,1.762,193,1.77,194,4.878,195,2.842,220,4.628,221,3.341,222,3.341,223,3.341,224,2.268,225,3.341]],["title/controllers/LoginController.html",[226,2.162,227,2.366]],["body/controllers/LoginController.html",[2,0.023,14,0.183,15,0.156,17,0.249,18,0.566,24,2.008,25,0.183,26,0.12,27,0.011,28,0.011,40,1.683,48,1.033,50,4.103,53,2.208,55,2.889,69,0.992,72,1.435,86,3.605,87,1.353,226,2.973,227,3.253,228,2.989,229,4.639,230,5.452,231,2.989,232,4.791,233,3.513,234,3.513,235,4.791,236,3.513,237,2.989,238,2.989,239,3.117,240,2.989,241,2.989,242,3.513,243,2.989,244,3.513,245,3.513,246,3.513,247,3.513]],["title/modules/LoginModule.html",[0,1.107,11,2.162]],["body/modules/LoginModule.html",[0,1.834,2,0.023,3,1.939,4,2.083,5,2.083,6,1.812,7,2.548,8,1.939,11,4.281,12,3.223,14,0.204,15,0.175,17,0.331,18,0.633,21,2.67,22,2.439,24,2.953,25,0.204,26,0.134,27,0.013,28,0.013,29,4.054,227,3.918,239,3.735,240,3.345,248,3.345,249,3.932,250,3.345,251,3.932,252,3.932,253,3.932]],["title/injectables/LoginService.html",[37,0.487,239,1.992]],["body/injectables/LoginService.html",[2,0.024,14,0.119,15,0.102,17,0.284,18,0.37,25,0.119,26,0.078,27,0.007,28,0.007,34,3.12,37,0.492,40,1.452,45,2.035,48,0.963,50,3.893,53,1.972,55,2.741,57,1.618,60,1.729,61,1.729,64,1.729,67,0.823,68,1.525,69,1.355,70,2.995,72,1.282,75,2.649,76,2.907,78,1.826,86,3.611,87,1.604,88,2.995,112,0.874,125,1.519,153,2.184,192,1.826,229,2.995,231,2.995,239,2.013,254,1.955,255,3.521,256,2.297,257,3.011,258,3.011,259,2.297,260,2.297,261,3.521,262,2.297,263,1.425,264,1.313,265,2.297,266,2.297,267,2.297,268,1.955,269,3.521,270,2.297,271,2.297,272,2.892,273,2.297,274,3.642,275,2.656,276,2.297,277,2.297,278,2.297,279,2.297,280,2.656,281,2.297,282,2.184,283,2.297,284,2.297,285,2.297,286,3.521,287,1.425,288,2.013,289,3.521,290,2.297,291,2.297]],["title/classes/Message.html",[26,0.119,275,2.162]],["body/classes/Message.html",[2,0.023,14,0.166,15,0.142,17,0.166,25,0.166,26,0.109,27,0.01,28,0.01,48,0.996,106,1.103,107,2.459,108,2.013,109,2.013,110,1.575,112,1.707,114,2.337,115,2.337,118,1.606,119,2.067,120,1.216,121,0.515,122,1.144,132,2.979,153,2.783,275,2.783,292,2.717,293,5.184,294,5.184,295,5.184,296,5.184,297,5.184,298,5.184,299,5.184,300,4.485,301,3.194,302,3.375,303,3.194,304,3.194,305,3.194,306,3.194,307,3.194,308,3.194]],["title/modules/ModelsModule.html",[0,1.107,12,1.718]],["body/modules/ModelsModule.html",[0,1.627,2,0.023,3,1.539,4,1.653,5,1.653,6,1.438,7,2.177,8,2.177,12,3.53,14,0.162,15,0.139,17,0.289,18,0.503,22,1.936,25,0.162,26,0.106,27,0.01,28,0.01,45,2.331,97,3.782,133,3.721,185,2.809,209,3.211,257,3.449,258,3.449,309,2.655,310,2.655,311,2.655,312,2.655,313,3.211,314,3.12,315,3.12,316,2.348,317,3.12,318,3.32,319,3.12,320,3.12]],["title/classes/PreferSetting.html",[26,0.119,321,2.366]],["body/classes/PreferSetting.html",[2,0.023,14,0.182,15,0.156,17,0.182,25,0.182,26,0.119,27,0.011,28,0.011,106,1.325,107,2.419,108,2.419,109,2.419,110,1.727,112,2.226,118,1.254,119,2.203,120,1.333,121,0.564,122,2.193,321,3.246,322,2.979,323,5.443,324,5.443,325,4.096,326,4.096,327,4.631,328,3.502,329,3.502,330,3.502,331,3.502,332,3.502,333,3.502]],["title/injectables/PreferSettingService.html",[37,0.487,258,1.846]],["body/injectables/PreferSettingService.html",[2,0.024,14,0.159,15,0.136,17,0.263,18,0.491,25,0.159,26,0.104,27,0.01,28,0.01,37,0.607,40,1.723,57,1.858,67,1.092,68,0.969,69,0.861,72,1.301,78,1.161,87,1.427,112,1.924,121,0.491,137,1.973,141,1.092,175,1.235,189,3.371,190,2.001,192,1.161,193,1.616,224,2.071,258,2.301,321,2.071,325,2.295,326,2.295,327,2.595,334,2.595,335,4.342,336,5.508,337,4.342,338,3.05,339,3.05,340,4.342,341,4.342,342,3.05,343,3.05,344,4.342,345,5.056,346,3.418,347,3.05,348,2.295,349,3.05,350,3.05,351,3.05,352,2.595,353,3.05,354,3.05,355,3.05,356,3.05,357,3.05]],["title/interfaces/RandomAvatar.html",[181,1.107,358,2.366]],["body/interfaces/RandomAvatar.html",[2,0.023,14,0.199,15,0.17,17,0.296,18,0.616,25,0.199,26,0.13,27,0.012,28,0.012,37,0.709,40,1.017,48,0.855,57,1.289,67,1.368,68,1.214,69,1.079,72,1.144,78,2.166,87,1.431,106,1.116,112,2.166,121,0.616,137,1.816,141,1.368,181,1.214,190,2.336,192,1.454,313,1.885,358,3.864,359,2.875,360,4.56,361,4.56,362,2.371,363,3.251,364,3.251,365,3.251,366,3.251,367,3.251,368,4.313,369,3.251,370,3.251,371,3.251,372,3.251,373,3.251,374,3.251]],["title/classes/RandomAvatars.html",[26,0.119,362,2.162]],["body/classes/RandomAvatars.html",[2,0.023,14,0.223,15,0.191,17,0.223,25,0.223,26,0.146,27,0.014,28,0.014,48,0.821,106,1.072,107,2.268,108,1.957,109,1.957,110,2.115,114,2.08,115,2.08,116,3.124,118,1.536,119,2.518,120,1.632,121,0.691,122,1.536,360,4.526,361,4.526,362,3.39,375,3.648,376,4.288,377,4.288,378,4.288]],["title/injectables/RandomAvatarsService.html",[37,0.487,313,1.718]],["body/injectables/RandomAvatarsService.html",[2,0.023,14,0.193,15,0.165,17,0.291,18,0.597,25,0.193,26,0.126,27,0.012,28,0.012,37,0.694,40,1.491,48,0.557,57,1.675,67,1.327,68,1.177,69,1.046,72,1.109,78,2.132,87,1.402,106,0.727,112,2.132,121,0.597,137,2.143,141,1.327,181,1.177,190,2.288,192,1.41,313,2.45,358,3.372,359,2.787,360,2.787,361,2.787,362,2.298,363,3.151,364,3.151,365,4.225,366,5.092,367,3.151,368,4.225,369,3.151,370,3.151,371,3.151,372,3.151,373,3.151,374,3.151,379,3.704,380,3.704,381,3.704]],["title/controllers/RegisterController.html",[226,2.162,382,2.366]],["body/controllers/RegisterController.html",[2,0.023,14,0.213,15,0.182,17,0.276,18,0.66,24,2.34,25,0.213,26,0.14,27,0.013,28,0.013,40,1.566,48,0.993,53,2.444,55,3.118,69,1.156,72,1.226,87,1.156,226,2.54,237,5.006,238,3.483,241,3.483,243,3.483,382,3.602,383,3.483,384,5.006,385,3.483,386,4.094,387,3.364,388,3.483,389,4.094,390,4.094,391,4.094]],["title/modules/RegisterModule.html",[0,1.107,13,2.162]],["body/modules/RegisterModule.html",[0,1.897,2,0.023,3,2.082,4,2.237,5,2.237,6,1.945,7,2.669,8,2.082,12,3.285,13,4.255,14,0.219,15,0.188,17,0.327,18,0.68,21,2.866,22,2.619,24,3.093,25,0.219,26,0.144,27,0.013,28,0.013,382,4.054,387,3.807,388,3.591,392,3.591,393,4.221,394,3.591,395,4.221,396,4.221]],["title/injectables/RegisterService.html",[37,0.487,387,1.992]],["body/injectables/RegisterService.html",[2,0.023,14,0.134,15,0.115,17,0.297,18,0.417,25,0.2,26,0.088,27,0.008,28,0.008,37,0.539,40,1.356,45,2.119,48,0.889,53,2.12,55,2.437,57,0.872,60,1.946,61,1.946,64,1.946,67,0.926,68,1.619,69,1.439,72,1.153,75,1.946,76,2.615,78,2.406,84,1.479,87,1.716,122,0.926,125,1.116,152,1.605,163,1.371,185,2.553,192,1.751,198,1.757,209,2.918,263,2.389,264,1.479,268,2.201,272,1.371,274,2.201,275,1.605,288,1.479,313,2.514,384,3.276,385,3.276,387,2.201,397,1.757,398,2.587,399,2.587,400,3.851,401,2.587,402,2.587,403,2.587,404,2.587,405,2.587,406,2.587,407,2.587,408,2.587,409,2.615,410,2.587,411,3.851,412,2.587,413,3.851,414,3.851,415,2.587,416,1.605,417,1.605,418,1.605,419,2.587,420,2.587,421,2.587,422,2.587,423,2.587,424,2.587,425,2.587,426,1.946,427,2.201,428,2.201,429,2.587,430,2.587,431,3.851,432,2.587]],["title/interfaces/RegisterUserMes.html",[181,1.107,433,2.162]],["body/interfaces/RegisterUserMes.html",[2,0.023,14,0.139,15,0.119,17,0.269,18,0.431,25,0.139,26,0.091,27,0.009,28,0.009,37,0.552,40,1.47,45,0.958,48,1.028,53,1.233,57,1.747,68,0.85,69,0.755,72,1.552,78,1.972,84,3.419,87,1.688,106,1.134,121,0.431,125,1.704,137,1.414,141,0.958,175,1.084,181,1.255,189,2.092,190,1.819,192,1.018,193,1.418,263,1.66,264,1.53,272,3.064,280,2.45,282,2.45,287,2.45,288,3.305,346,1.66,409,1.817,416,3.428,417,3.588,418,3.588,433,2.911,434,1.817,435,2.682,436,2.013,437,2.013,438,2.013,439,2.013,440,2.013,441,2.013,442,2.013,443,2.013,444,2.013,445,2.013,446,2.013,447,2.013,448,2.013,449,2.013,450,2.013,451,2.013,452,2.013,453,2.013,454,2.013,455,2.013,456,2.013,457,2.013,458,2.013,459,2.013,460,2.013,461,2.013]],["title/classes/Socket.html",[26,0.119,462,2.366]],["body/classes/Socket.html",[2,0.023,14,0.199,15,0.17,17,0.199,25,0.199,26,0.13,27,0.012,28,0.012,48,0.911,106,0.995,107,2.321,108,1.816,109,1.816,110,1.885,114,2.307,115,2.307,118,1.816,119,2.336,120,1.454,121,0.616,122,1.368,132,2.686,174,3.815,175,2.625,462,3.443,463,3.251,464,5.69,465,5.69,466,5.69,467,3.821,468,5.07,469,5.156,470,3.821,471,3.821]],["title/modules/SocketModule.html",[0,1.107,472,2.366]],["body/modules/SocketModule.html",[0,1.925,2,0.023,3,2.149,4,2.308,5,2.308,6,2.007,7,2.723,8,2.723,14,0.226,15,0.194,17,0.287,18,0.702,25,0.226,26,0.149,27,0.014,28,0.014,472,4.632,473,3.706,474,3.706,475,3.706,476,4.405,477,4.356,478,4.356]],["title/injectables/SocketService.html",[37,0.487,257,1.846]],["body/injectables/SocketService.html",[2,0.024,14,0.157,15,0.134,17,0.261,18,0.486,25,0.157,26,0.103,27,0.01,28,0.01,37,0.602,40,1.718,57,1.848,67,1.08,68,0.959,69,0.852,72,1.29,78,1.148,87,1.419,121,0.486,137,1.963,141,1.08,175,1.222,189,3.512,190,1.985,192,1.148,193,1.598,224,2.049,257,2.282,346,3.4,348,2.27,352,2.566,462,3.412,479,2.566,480,4.308,481,4.308,482,4.308,483,3.017,484,3.017,485,4.308,486,4.308,487,3.017,488,4.308,489,3.017,490,5.025,491,4.308,492,3.017,493,3.017,494,3.017,495,3.017,496,3.017,497,3.017,498,3.017,499,3.017,500,3.017]],["title/classes/Theme.html",[26,0.119,501,2.622]],["body/classes/Theme.html",[2,0.023,14,0.164,15,0.14,17,0.164,25,0.164,26,0.108,27,0.01,28,0.01,48,0.919,106,1.259,107,2.454,108,2.191,109,2.191,110,1.557,112,1.693,114,1.693,115,2.329,116,2.543,118,1.593,119,2.05,120,1.201,121,0.509,122,2.251,172,4.209,325,3.876,501,3.347,502,2.686,503,5.151,504,5.151,505,5.151,506,5.151,507,5.151,508,4.383,509,3.157,510,3.157,511,3.157,512,3.157,513,3.157,514,4.449,515,3.157,516,3.157]],["title/classes/ThemeType.html",[26,0.119,517,2.622]],["body/classes/ThemeType.html",[2,0.023,14,0.223,15,0.191,17,0.223,25,0.223,26,0.146,27,0.014,28,0.014,48,0.821,106,1.072,107,2.268,108,1.957,109,1.957,110,2.115,114,2.08,115,2.08,118,1.536,119,2.518,120,1.632,121,0.691,122,1.536,302,4.112,508,5.117,517,4.112,518,3.648,519,6.014,520,4.288,521,4.288,522,4.288]],["title/classes/Tone.html",[26,0.119,523,2.622]],["body/classes/Tone.html",[2,0.023,14,0.207,15,0.178,17,0.207,25,0.207,26,0.136,27,0.013,28,0.013,48,0.926,106,1.023,107,2.349,108,1.868,109,1.868,110,1.968,114,2.346,115,2.346,116,2.981,118,1.868,119,2.403,120,1.518,121,0.643,122,1.429,302,3.925,326,4.373,523,3.925,524,3.394,525,5.811,526,5.811,527,3.989,528,3.989,529,3.989]],["title/classes/User.html",[26,0.119,435,1.992]],["body/classes/User.html",[2,0.023,14,0.141,15,0.121,17,0.141,25,0.141,26,0.093,27,0.009,28,0.009,48,0.986,84,2.706,106,1.141,107,2.455,108,2.082,109,2.082,112,1.519,114,1.519,115,2.346,116,2.282,118,0.973,121,0.438,122,1.869,125,2.043,132,2.508,153,3.237,169,2.31,172,4.374,173,3.396,174,4.374,175,2.657,180,2.31,280,2.937,282,2.937,287,2.937,288,2.706,416,2.937,417,2.937,418,2.937,435,2.282,469,4.946,530,2.31,531,2.716,532,2.716,533,2.716,534,2.716,535,2.716,536,2.716,537,2.716,538,2.716,539,2.716,540,2.716]],["title/interfaces/UserBasicMes.html",[181,1.107,272,1.846]],["body/interfaces/UserBasicMes.html",[2,0.023,14,0.132,15,0.113,17,0.263,18,0.41,25,0.132,26,0.087,27,0.008,28,0.008,37,0.532,40,1.44,45,0.911,48,1.031,53,1.172,57,1.705,68,0.809,69,0.718,72,1.514,78,1.924,84,3.363,87,1.661,106,1.235,121,0.41,125,2.335,137,1.362,141,0.911,175,1.03,181,1.209,189,2.015,190,1.753,192,0.968,193,1.348,263,1.579,264,1.454,272,3.117,280,3.357,282,3.357,287,3.357,288,3.245,346,1.579,409,1.728,416,2.36,417,3.522,418,3.522,433,2.36,434,1.728,435,2.604,436,1.915,437,1.915,438,1.915,439,1.915,440,1.915,441,1.915,442,1.915,443,1.915,444,1.915,445,1.915,446,1.915,447,1.915,448,1.915,449,1.915,450,1.915,451,1.915,452,1.915,453,1.915,454,1.915,455,1.915,456,1.915,457,1.915,458,1.915,459,1.915,460,1.915,461,1.915]],["title/injectables/UserService.html",[37,0.487,45,1.248]],["body/injectables/UserService.html",[2,0.024,14,0.113,15,0.097,17,0.243,18,0.352,25,0.113,26,0.074,27,0.007,28,0.007,37,0.473,40,1.722,45,1.212,48,0.963,53,1.559,55,1.793,57,1.944,68,0.693,69,0.616,72,1.399,78,1.777,84,2.669,87,1.575,106,0.916,121,0.352,125,1.46,137,1.672,141,0.782,175,0.884,181,1.075,189,3.263,190,1.559,192,0.831,193,1.156,224,1.482,263,1.354,264,1.248,272,2.833,280,2.1,282,2.1,287,2.1,288,2.369,346,2.897,348,2.546,409,1.482,416,2.1,417,2.572,418,2.572,433,3.136,434,1.482,435,2.369,436,1.642,437,1.642,438,2.546,439,2.546,440,1.642,441,2.546,442,1.642,443,1.642,444,1.642,445,2.546,446,1.642,447,1.642,448,1.642,449,2.546,450,1.642,451,1.642,452,1.642,453,1.642,454,1.642,455,1.642,456,1.642,457,1.642,458,1.642,459,2.546,460,1.642,461,1.642,541,3.384,542,3.384,543,3.384,544,3.384,545,3.384,546,2.182,547,2.182,548,2.182,549,2.182,550,2.182,551,3.384,552,2.182,553,2.182]],["title/injectables/WebsocketService.html",[37,0.487,476,2.162]],["body/injectables/WebsocketService.html",[2,0.023,14,0.244,15,0.209,17,0.244,18,0.756,25,0.244,26,0.16,27,0.015,28,0.015,37,0.809,48,0.869,67,2.071,72,1.406,476,3.588,554,3.994,555,6.543,556,4.694,557,4.694]],["title/coverage.html",[558,4.053]],["body/coverage.html",[2,0.023,6,1.154,26,0.222,27,0.008,28,0.008,34,1.431,37,0.891,38,2.13,45,0.897,65,1.884,76,1.7,99,1.884,101,1.7,102,2.13,123,1.884,124,2.13,133,1.431,134,2.13,145,1.884,146,2.13,160,1.553,161,2.13,181,1.707,182,1.7,183,2.828,185,1.08,192,2.726,196,1.553,197,2.13,204,1.7,205,2.828,209,1.235,226,2.331,227,1.7,228,2.13,239,1.431,254,2.13,257,1.326,258,1.326,272,1.326,275,1.553,292,2.13,313,1.235,316,1.884,318,1.884,321,1.7,322,2.13,334,2.13,358,1.7,359,2.828,362,1.553,375,2.13,382,1.7,383,2.13,387,1.431,397,3.063,426,1.884,427,3.197,433,1.553,434,3.063,435,1.431,462,1.7,463,2.13,476,1.553,479,2.13,501,1.884,502,2.13,517,1.884,518,2.13,523,1.884,524,2.13,530,2.13,554,2.13,559,4.511,560,2.13,561,5.642,562,6.02,563,6.272,564,5.373,565,2.13,566,2.503,567,2.13,568,2.13,569,2.13,570,2.13,571,5.014,572,5.014,573,3.758,574,2.503,575,2.13,576,2.13,577,2.503,578,2.503,579,2.503]],["title/dependencies.html",[3,2.068,580,2.905]],["body/dependencies.html",[2,0.023,18,0.728,27,0.014,28,0.014,62,3.845,63,3.845,121,0.728,264,2.583,581,6.162,582,4.519,583,5.648,584,4.519,585,4.519,586,5.648,587,4.519,588,4.519,589,4.519,590,4.519,591,4.519,592,3.845,593,4.519,594,4.519,595,4.519,596,4.519,597,4.519,598,4.519,599,4.519,600,4.519,601,4.519,602,4.519,603,4.519,604,4.519]],["title/miscellaneous/functions.html",[605,2.471,606,4.193]],["body/miscellaneous/functions.html",[2,0.023,6,2.986,27,0.016,28,0.016,57,1.708,397,3.44,428,4.31,565,4.31,567,5.153,607,5.065,608,4.31,609,5.065]],["title/index.html",[610,2.905,611,2.905,612,2.905]],["body/index.html",[2,0.023,15,0.168,27,0.012,28,0.012,137,1.354,558,3.217,613,3.781,614,3.781,615,5.035,616,3.781,617,3.781,618,3.781,619,3.781,620,3.781,621,3.781,622,3.781,623,3.781,624,3.781,625,3.781,626,5.66,627,3.781,628,3.781,629,3.781,630,6.597,631,3.781,632,3.781,633,3.781,634,6.463,635,3.781,636,3.781,637,5.035,638,3.781,639,3.781,640,3.781,641,3.781,642,5.035,643,5.035,644,3.781,645,3.781,646,3.781,647,5.035,648,5.035,649,3.781,650,3.781,651,3.781,652,3.781,653,3.781,654,3.781,655,3.781,656,3.781,657,3.781,658,3.781,659,3.781,660,3.781,661,3.781,662,3.781,663,3.781,664,3.781,665,3.781,666,3.781,667,3.781,668,3.781,669,3.781,670,3.781,671,3.781,672,3.781]],["title/modules.html",[673,4.764]],["body/modules.html",[1,3.44,2,0.023,11,3.143,12,2.499,13,3.143,27,0.016,28,0.016,29,3.143,97,3.143,472,3.44,674,6.966]],["title/overview.html",[675,4.764]],["body/overview.html",[0,0.874,1,4.201,2,0.023,3,1.357,4,1.457,5,1.457,6,1.267,7,1.357,8,1.357,9,2.34,10,2.34,11,3.916,12,3.505,13,3.743,24,1.572,27,0.009,28,0.009,29,3.838,30,2.34,32,2.34,33,2.34,34,3.449,45,2.161,97,2.958,133,3.449,185,2.603,209,2.976,239,2.726,248,2.34,250,2.34,257,3.196,258,3.196,309,2.34,310,2.34,311,2.34,312,2.34,313,2.976,387,2.726,392,2.34,394,2.34,472,3.795,473,2.34,474,2.34,475,2.34,476,3.743,676,2.34,677,2.75,678,2.75,679,2.75,680,2.75]],["title/miscellaneous/variables.html",[605,2.471,681,4.193]],["body/miscellaneous/variables.html",[2,0.023,27,0.008,28,0.008,40,0.648,45,0.872,53,1.123,55,1.291,65,2.77,87,0.688,99,2.77,106,0.478,122,0.872,133,1.393,141,2.323,175,0.987,185,1.051,209,1.202,257,1.291,258,1.291,313,1.202,316,2.77,318,2.77,397,1.654,426,2.77,560,2.073,568,2.073,569,3.132,570,2.073,575,2.073,576,2.073,592,2.073,608,2.073,676,2.073,682,2.436,683,2.436,684,2.436,685,2.436,686,2.436,687,3.682,688,6.552,689,6.552,690,6.552,691,2.436,692,2.436,693,2.436,694,3.682,695,2.436,696,2.436,697,2.436,698,2.436,699,6.97,700,2.436,701,2.436,702,2.436,703,2.436,704,2.436,705,2.436,706,2.436,707,2.436,708,2.436,709,2.436,710,2.436,711,2.436,712,2.436,713,2.436,714,2.436,715,2.436,716,2.436,717,2.436,718,2.436,719,2.436,720,2.436,721,2.436,722,2.436,723,2.436,724,2.436,725,2.436,726,2.436,727,2.436,728,2.436,729,2.436,730,2.436,731,2.436,732,2.436,733,2.436,734,2.436,735,2.436,736,2.436,737,2.436]]],"invertedIndex":[["",{"_index":2,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"injectables/ExpressionService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"modules/ModelsModule.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"modules/SocketModule.html":{},"injectables/SocketService.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":192,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["0.2.22",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["0.5.6",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":112,"title":{},"body":{"classes/Expression.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"classes/Theme.html":{},"classes/User.html":{}}}],["10",{"_index":122,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"classes/RandomAvatars.html":{},"injectables/RegisterService.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":132,"title":{},"body":{"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/Socket.html":{},"classes/User.html":{}}}],["1000",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100})@primarycolumn",{"_index":128,"title":{},"body":{"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/GroupRelationship.html":{}}}],["100})@primarygeneratedcolumn('uuid",{"_index":169,"title":{},"body":{"classes/Group.html":{},"classes/User.html":{}}}],["10})@primarycolumn",{"_index":126,"title":{},"body":{"classes/ExpressionCollection.html":{}}}],["10})@primarygeneratedcolumn",{"_index":110,"title":{},"body":{"classes/Expression.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{}}}],["11",{"_index":678,"title":{},"body":{"overview.html":{}}}],["13",{"_index":679,"title":{},"body":{"overview.html":{}}}],["2",{"_index":677,"title":{},"body":{"overview.html":{}}}],["2.17.1",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":302,"title":{},"body":{"classes/Message.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{}}}],["24",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["255",{"_index":116,"title":{},"body":{"classes/Expression.html":{},"classes/Group.html":{},"classes/RandomAvatars.html":{},"classes/Theme.html":{},"classes/Tone.html":{},"classes/User.html":{}}}],["3.0.0",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":468,"title":{},"body":{"classes/Socket.html":{}}}],["3306",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":680,"title":{},"body":{"overview.html":{}}}],["5.0.6",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":173,"title":{},"body":{"classes/Group.html":{},"classes/User.html":{}}}],["6.10.13",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":676,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["_group.service",{"_index":208,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{}}}],["_id",{"_index":464,"title":{},"body":{"classes/Socket.html":{}}}],["accesstoken",{"_index":50,"title":{},"body":{"injectables/AuthService.html":{},"controllers/LoginController.html":{},"injectables/LoginService.html":{}}}],["add_friend_time",{"_index":147,"title":{},"body":{"classes/Friendship.html":{}}}],["agree_time",{"_index":148,"title":{},"body":{"classes/Friendship.html":{}}}],["amazing",{"_index":655,"title":{},"body":{"index.html":{}}}],["angelchatinsecret",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular",{"_index":624,"title":{},"body":{"index.html":{}}}],["app",{"_index":632,"title":{},"body":{"index.html":{}}}],["applications",{"_index":621,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":40,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["auth.service",{"_index":36,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":252,"title":{},"body":{"modules/LoginModule.html":{}}}],["auth/auth.service",{"_index":265,"title":{},"body":{"injectables/LoginService.html":{}}}],["authmodule",{"_index":29,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/LoginModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":665,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":34,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LoginService.html":{},"coverage.html":{},"overview.html":{}}}],["avatarmes",{"_index":370,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["avatarmes.random_avatar_url",{"_index":374,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["await",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":656,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":263,"title":{},"body":{"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["bcrypt.compare(password,saltpassword",{"_index":448,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["bcrypt.gensalt(saltrounds",{"_index":430,"title":{},"body":{"injectables/RegisterService.html":{}}}],["bcrypt.hash(pass,salt",{"_index":432,"title":{},"body":{"injectables/RegisterService.html":{}}}],["bcryptjs",{"_index":264,"title":{},"body":{"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["body",{"_index":238,"title":{},"body":{"controllers/LoginController.html":{},"controllers/RegisterController.html":{}}}],["body('accesstoken",{"_index":244,"title":{},"body":{"controllers/LoginController.html":{}}}],["body('password",{"_index":243,"title":{},"body":{"controllers/LoginController.html":{},"controllers/RegisterController.html":{}}}],["body('userid",{"_index":246,"title":{},"body":{"controllers/LoginController.html":{}}}],["body('username",{"_index":242,"title":{},"body":{"controllers/LoginController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{},"modules/SocketModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["building",{"_index":616,"title":{},"body":{"index.html":{}}}],["catch(e",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{}}}],["char",{"_index":114,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{}}}],["chating",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkgroupexistence",{"_index":220,"title":{},"body":{"injectables/GroupService.html":{}}}],["checkgroupexistence(checkoption",{"_index":188,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["checkoption",{"_index":224,"title":{},"body":{"injectables/GroupService.html":{},"injectables/PreferSettingService.html":{},"injectables/SocketService.html":{},"injectables/UserService.html":{}}}],["checkprefersettingexistence",{"_index":335,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["checkprefersettingexistence(checkoption",{"_index":341,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["checksocketexistence",{"_index":480,"title":{},"body":{"injectables/SocketService.html":{}}}],["checksocketexistence(checkoption",{"_index":486,"title":{},"body":{"injectables/SocketService.html":{}}}],["checkuserexistence",{"_index":541,"title":{},"body":{"injectables/UserService.html":{}}}],["checkuserexistence(checkoption",{"_index":439,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["checkuserpassword",{"_index":542,"title":{},"body":{"injectables/UserService.html":{}}}],["checkuserpassword(username",{"_index":445,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["class",{"_index":26,"title":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"injectables/ExpressionService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"modules/ModelsModule.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"modules/SocketModule.html":{},"injectables/SocketService.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{},"coverage.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":30,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":32,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":31,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":33,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_loginmodule",{"_index":248,"title":{},"body":{"modules/LoginModule.html":{},"overview.html":{}}}],["cluster_loginmodule_imports",{"_index":249,"title":{},"body":{"modules/LoginModule.html":{}}}],["cluster_loginmodule_providers",{"_index":250,"title":{},"body":{"modules/LoginModule.html":{},"overview.html":{}}}],["cluster_modelsmodule",{"_index":309,"title":{},"body":{"modules/ModelsModule.html":{},"overview.html":{}}}],["cluster_modelsmodule_exports",{"_index":311,"title":{},"body":{"modules/ModelsModule.html":{},"overview.html":{}}}],["cluster_modelsmodule_imports",{"_index":310,"title":{},"body":{"modules/ModelsModule.html":{},"overview.html":{}}}],["cluster_modelsmodule_providers",{"_index":312,"title":{},"body":{"modules/ModelsModule.html":{},"overview.html":{}}}],["cluster_registermodule",{"_index":392,"title":{},"body":{"modules/RegisterModule.html":{},"overview.html":{}}}],["cluster_registermodule_imports",{"_index":393,"title":{},"body":{"modules/RegisterModule.html":{}}}],["cluster_registermodule_providers",{"_index":394,"title":{},"body":{"modules/RegisterModule.html":{},"overview.html":{}}}],["cluster_socketmodule",{"_index":473,"title":{},"body":{"modules/SocketModule.html":{},"overview.html":{}}}],["cluster_socketmodule_exports",{"_index":474,"title":{},"body":{"modules/SocketModule.html":{},"overview.html":{}}}],["cluster_socketmodule_providers",{"_index":475,"title":{},"body":{"modules/SocketModule.html":{},"overview.html":{}}}],["column",{"_index":120,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{}}}],["column({type",{"_index":107,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{}}}],["config/config",{"_index":66,"title":{},"body":{"injectables/AuthService.html":{}}}],["connection",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(expression",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(expressioncollection",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(friendship",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(group",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(grouprelationship",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(message",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(prefersetting",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(randomavatars",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(socket",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(theme",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(themetype",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(tone",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.getrepository(user",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.provider",{"_index":100,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["connection/connection.module",{"_index":315,"title":{},"body":{"modules/ModelsModule.html":{}}}],["connectionmodule",{"_index":97,"title":{"modules/ConnectionModule.html":{}},"body":{"modules/ConnectionModule.html":{},"modules/ModelsModule.html":{},"modules.html":{},"overview.html":{}}}],["connectionoptions",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectionprovider",{"_index":99,"title":{},"body":{"modules/ConnectionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["console.log('decodedtoken',decodedtoken",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":67,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"injectables/RegisterService.html":{},"injectables/SocketService.html":{},"injectables/WebsocketService.html":{}}}],["constructor(@inject('user_repository",{"_index":437,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":256,"title":{},"body":{"injectables/LoginService.html":{}}}],["constructor(expressionrepository",{"_index":136,"title":{},"body":{"injectables/ExpressionService.html":{}}}],["constructor(grouprelationshiprepository",{"_index":217,"title":{},"body":{"injectables/GroupRelationshipService.html":{}}}],["constructor(grouprepository",{"_index":221,"title":{},"body":{"injectables/GroupService.html":{}}}],["constructor(prefersettingrepository",{"_index":338,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["constructor(private",{"_index":241,"title":{},"body":{"controllers/LoginController.html":{},"controllers/RegisterController.html":{}}}],["constructor(randomavatarservice",{"_index":398,"title":{},"body":{"injectables/RegisterService.html":{}}}],["constructor(randomavatarsrepository",{"_index":379,"title":{},"body":{"injectables/RandomAvatarsService.html":{}}}],["constructor(socketrepository",{"_index":483,"title":{},"body":{"injectables/SocketService.html":{}}}],["constructor(userrepository",{"_index":546,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":44,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":226,"title":{"controllers/LoginController.html":{},"controllers/RegisterController.html":{}},"body":{"controllers/LoginController.html":{},"controllers/RegisterController.html":{},"coverage.html":{}}}],["controller('register",{"_index":389,"title":{},"body":{"controllers/RegisterController.html":{}}}],["controllers",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"overview.html":{}}}],["count",{"_index":190,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["coverage",{"_index":558,"title":{"coverage.html":{}},"body":{"index.html":{}}}],["createconnection(ormconfig",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdefaultprefersetting",{"_index":336,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["creategrouprelationship",{"_index":216,"title":{},"body":{"injectables/GroupRelationshipService.html":{}}}],["creategrouprelationship(grouprelationshipmes",{"_index":212,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{}}}],["createsocket",{"_index":481,"title":{},"body":{"injectables/SocketService.html":{}}}],["createsocket(socketcontent",{"_index":488,"title":{},"body":{"injectables/SocketService.html":{}}}],["data",{"_index":289,"title":{},"body":{"injectables/LoginService.html":{}}}],["database",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_connection",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date().tolocalestring",{"_index":268,"title":{},"body":{"injectables/LoginService.html":{},"injectables/RegisterService.html":{}}}],["date.now",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["datetime",{"_index":153,"title":{},"body":{"classes/Friendship.html":{},"classes/Group.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"classes/User.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{},"modules/SocketModule.html":{},"overview.html":{}}}],["decodedtoken",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodetoken",{"_index":39,"title":{},"body":{"injectables/AuthService.html":{}}}],["decodetoken(accesstoken",{"_index":47,"title":{},"body":{"injectables/AuthService.html":{}}}],["defaultgroup",{"_index":419,"title":{},"body":{"injectables/RegisterService.html":{}}}],["defaultgroup.group_id",{"_index":423,"title":{},"body":{"injectables/RegisterService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{},"modules/SocketModule.html":{},"overview.html":{}}}],["description",{"_index":625,"title":{},"body":{"index.html":{}}}],["desktop_reminder",{"_index":323,"title":{},"body":{"classes/PreferSetting.html":{}}}],["desktop_reminder:1",{"_index":354,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["development",{"_index":633,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":644,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":617,"title":{},"body":{"index.html":{}}}],["entities",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/_group.entity",{"_index":184,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["entities/expression.entity",{"_index":142,"title":{},"body":{"injectables/ExpressionService.html":{}}}],["entities/group_relationship.entity",{"_index":207,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{}}}],["entities/prefer_setting.entity",{"_index":349,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["entities/random_avatars.entity",{"_index":363,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["entities/socket.entity",{"_index":493,"title":{},"body":{"injectables/SocketService.html":{}}}],["entities/user.entity",{"_index":436,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":118,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{}}}],["entity(\"_group",{"_index":179,"title":{},"body":{"classes/Group.html":{}}}],["entity(\"expression_collection",{"_index":131,"title":{},"body":{"classes/ExpressionCollection.html":{}}}],["entity(\"group_relationship",{"_index":203,"title":{},"body":{"classes/GroupRelationship.html":{}}}],["entity(\"prefer_setting",{"_index":333,"title":{},"body":{"classes/PreferSetting.html":{}}}],["entity(\"theme_type",{"_index":522,"title":{},"body":{"classes/ThemeType.html":{}}}],["entity('random_avatars",{"_index":378,"title":{},"body":{"classes/RandomAvatars.html":{}}}],["entity,column,primarygeneratedcolumn",{"_index":540,"title":{},"body":{"classes/User.html":{}}}],["enviroment",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{}}}],["error_code",{"_index":274,"title":{},"body":{"injectables/LoginService.html":{},"injectables/RegisterService.html":{}}}],["expires",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"injectables/ExpressionService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"modules/ModelsModule.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"modules/SocketModule.html":{},"injectables/SocketService.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{},"modules/SocketModule.html":{},"overview.html":{}}}],["express",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["expression",{"_index":101,"title":{"classes/Expression.html":{}},"body":{"classes/Expression.html":{},"injectables/ExpressionService.html":{},"coverage.html":{}}}],["expression_id",{"_index":103,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{}}}],["expression_repository",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expression_type",{"_index":104,"title":{},"body":{"classes/Expression.html":{}}}],["expression_url",{"_index":105,"title":{},"body":{"classes/Expression.html":{}}}],["expressioncollection",{"_index":123,"title":{"classes/ExpressionCollection.html":{}},"body":{"classes/ExpressionCollection.html":{},"coverage.html":{}}}],["expressioncollection_repository",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expressionrepository",{"_index":139,"title":{},"body":{"injectables/ExpressionService.html":{}}}],["expressionservice",{"_index":133,"title":{"injectables/ExpressionService.html":{}},"body":{"injectables/ExpressionService.html":{},"modules/ModelsModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":193,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":135,"title":{},"body":{"injectables/ExpressionService.html":{}}}],["float",{"_index":514,"title":{},"body":{"classes/Theme.html":{}}}],["framework",{"_index":615,"title":{},"body":{"index.html":{}}}],["friendship",{"_index":145,"title":{"classes/Friendship.html":{}},"body":{"classes/Friendship.html":{},"coverage.html":{}}}],["friendship_repository",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["friendship_type",{"_index":149,"title":{},"body":{"classes/Friendship.html":{}}}],["from_user_id",{"_index":150,"title":{},"body":{"classes/Friendship.html":{}}}],["frosted_glass_effect",{"_index":503,"title":{},"body":{"classes/Theme.html":{}}}],["function",{"_index":427,"title":{},"body":{"injectables/RegisterService.html":{},"coverage.html":{}}}],["functions",{"_index":606,"title":{"miscellaneous/functions.html":{}},"body":{}}],["genjwt",{"_index":41,"title":{},"body":{"injectables/AuthService.html":{}}}],["genjwt(username",{"_index":51,"title":{},"body":{"injectables/AuthService.html":{}}}],["gensaltpassword",{"_index":567,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gensaltpassword(pass",{"_index":428,"title":{},"body":{"injectables/RegisterService.html":{},"miscellaneous/functions.html":{}}}],["getdefaultgroup",{"_index":194,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["getrandomavatarurl",{"_index":366,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["getsocketid",{"_index":555,"title":{},"body":{"injectables/WebsocketService.html":{}}}],["getting",{"_index":610,"title":{"index.html":{}},"body":{}}],["getuserbasicmes",{"_index":543,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbasicmes(option",{"_index":449,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["group",{"_index":160,"title":{"classes/Group.html":{}},"body":{"classes/Group.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["group_avatar",{"_index":162,"title":{},"body":{"classes/Group.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["group_id",{"_index":163,"title":{},"body":{"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"injectables/RegisterService.html":{}}}],["group_manager_id",{"_index":164,"title":{},"body":{"classes/Group.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["group_member_type",{"_index":198,"title":{},"body":{"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/RegisterService.html":{}}}],["group_name",{"_index":165,"title":{},"body":{"classes/Group.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["group_reg_time",{"_index":166,"title":{},"body":{"classes/Group.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["group_repository",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["group_type",{"_index":167,"title":{},"body":{"classes/Group.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["groupmes",{"_index":182,"title":{"interfaces/GroupMes.html":{}},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["grouprelationship",{"_index":196,"title":{"classes/GroupRelationship.html":{}},"body":{"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"coverage.html":{}}}],["grouprelationship_repository",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grouprelationshipmes",{"_index":204,"title":{"interfaces/GroupRelationshipMes.html":{}},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"coverage.html":{}}}],["grouprelationshiprepository",{"_index":211,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{}}}],["grouprelationshipservice",{"_index":209,"title":{"injectables/GroupRelationshipService.html":{}},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"modules/ModelsModule.html":{},"injectables/RegisterService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["grouprepository",{"_index":187,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["groupservice",{"_index":185,"title":{"injectables/GroupService.html":{}},"body":{"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"modules/ModelsModule.html":{},"injectables/RegisterService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":651,"title":{},"body":{"index.html":{}}}],["gyp",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["hash",{"_index":431,"title":{},"body":{"injectables/RegisterService.html":{}}}],["heavily",{"_index":622,"title":{},"body":{"index.html":{}}}],["here",{"_index":662,"title":{},"body":{"index.html":{}}}],["host",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":60,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{}}}],["httpexception(\"无效token，此为非法登录\",httpstatus.forbidden",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception(\"用户名或密码不正确\",httpstatus.forbidden",{"_index":290,"title":{},"body":{"injectables/LoginService.html":{}}}],["httpexception(\"非法登录\",httpstatus.forbidden",{"_index":291,"title":{},"body":{"injectables/LoginService.html":{}}}],["httpexception('用户名已存在',httpstatus.forbidden",{"_index":408,"title":{},"body":{"injectables/RegisterService.html":{}}}],["https://nestjs.com",{"_index":669,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":61,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{}}}],["id",{"_index":351,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["if(!user_prefersetting_id",{"_index":284,"title":{},"body":{"injectables/LoginService.html":{}}}],["if(!user_socketid",{"_index":281,"title":{},"body":{"injectables/LoginService.html":{}}}],["if(await",{"_index":269,"title":{},"body":{"injectables/LoginService.html":{}}}],["if(decodedtoken.expires",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(this.userservice.checkuserexistence({user_id})&&this.groupservice.checkgroupexistence({group_id",{"_index":214,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{}}}],["if(userexistence",{"_index":407,"title":{},"body":{"injectables/RegisterService.html":{}}}],["if(username",{"_index":276,"title":{},"body":{"injectables/LoginService.html":{}}}],["import",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"injectables/ExpressionService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"modules/ModelsModule.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"modules/SocketModule.html":{},"injectables/SocketService.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{}}}],["imports",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{}}}],["index",{"_index":612,"title":{"index.html":{}},"body":{}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"injectables/ExpressionService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"modules/ModelsModule.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"modules/SocketModule.html":{},"injectables/SocketService.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{}}}],["inject",{"_index":141,"title":{},"body":{"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["inject(\"prefersetting_repository",{"_index":350,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["inject(\"socket_repository",{"_index":494,"title":{},"body":{"injectables/SocketService.html":{}}}],["inject('expression_repository",{"_index":143,"title":{},"body":{"injectables/ExpressionService.html":{}}}],["inject('group_repository",{"_index":186,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["inject('grouprelationship_repository",{"_index":210,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{}}}],["inject('randomavatars_repository",{"_index":364,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["injectable",{"_index":37,"title":{"injectables/AuthService.html":{},"injectables/ExpressionService.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"injectables/RandomAvatarsService.html":{},"injectables/RegisterService.html":{},"injectables/SocketService.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{},"coverage.html":{}}}],["inspired",{"_index":623,"title":{},"body":{"index.html":{}}}],["installation",{"_index":629,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":631,"title":{},"body":{"index.html":{}}}],["int",{"_index":108,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{}}}],["interface",{"_index":181,"title":{"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"interfaces/RandomAvatar.html":{},"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{}},"body":{"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["ip",{"_index":465,"title":{},"body":{"classes/Socket.html":{}}}],["join",{"_index":658,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":62,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwt.decode(accesstoken,jwtconfig.jwtsecret",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt.encode(payload,jwtconfig.jwtsecret",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtconfig",{"_index":65,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.tokenexpirestime",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtsecret",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kamil",{"_index":666,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{},"modules/SocketModule.html":{},"overview.html":{}}}],["length",{"_index":115,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{}}}],["license",{"_index":672,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":648,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":229,"title":{},"body":{"controllers/LoginController.html":{},"injectables/LoginService.html":{}}}],["login(username",{"_index":231,"title":{},"body":{"controllers/LoginController.html":{},"injectables/LoginService.html":{}}}],["login.controller",{"_index":253,"title":{},"body":{"modules/LoginModule.html":{}}}],["login.service",{"_index":240,"title":{},"body":{"controllers/LoginController.html":{},"modules/LoginModule.html":{}}}],["login/login.module",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["logincontroller",{"_index":227,"title":{"controllers/LoginController.html":{}},"body":{"controllers/LoginController.html":{},"modules/LoginModule.html":{},"coverage.html":{}}}],["loginmodule",{"_index":11,"title":{"modules/LoginModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoginModule.html":{},"modules.html":{},"overview.html":{}}}],["loginout",{"_index":230,"title":{},"body":{"controllers/LoginController.html":{}}}],["loginout(userid",{"_index":234,"title":{},"body":{"controllers/LoginController.html":{}}}],["loginservice",{"_index":239,"title":{"injectables/LoginService.html":{}},"body":{"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"coverage.html":{},"overview.html":{}}}],["logout",{"_index":255,"title":{},"body":{"injectables/LoginService.html":{}}}],["logout(userid",{"_index":261,"title":{},"body":{"injectables/LoginService.html":{}}}],["matching",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"injectables/ExpressionService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"modules/ModelsModule.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"modules/SocketModule.html":{},"injectables/SocketService.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":369,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["message",{"_index":275,"title":{"classes/Message.html":{}},"body":{"injectables/LoginService.html":{},"classes/Message.html":{},"injectables/RegisterService.html":{},"coverage.html":{}}}],["message_content",{"_index":293,"title":{},"body":{"classes/Message.html":{}}}],["message_content_type",{"_index":294,"title":{},"body":{"classes/Message.html":{}}}],["message_created_time",{"_index":295,"title":{},"body":{"classes/Message.html":{}}}],["message_from_id",{"_index":296,"title":{},"body":{"classes/Message.html":{}}}],["message_id",{"_index":297,"title":{},"body":{"classes/Message.html":{}}}],["message_repository",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message_to_id",{"_index":298,"title":{},"body":{"classes/Message.html":{}}}],["message_type",{"_index":299,"title":{},"body":{"classes/Message.html":{}}}],["metadata",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["miscellaneous",{"_index":605,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{}}],["mit",{"_index":647,"title":{},"body":{"index.html":{}}}],["mode",{"_index":637,"title":{},"body":{"index.html":{}}}],["models.providers",{"_index":317,"title":{},"body":{"modules/ModelsModule.html":{}}}],["models.services",{"_index":319,"title":{},"body":{"modules/ModelsModule.html":{}}}],["modelsmodule",{"_index":12,"title":{"modules/ModelsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{},"modules.html":{},"overview.html":{}}}],["modelsmodule,registermodule,loginmodule",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["modelsproviders",{"_index":316,"title":{},"body":{"modules/ModelsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modelsproviders,...modelsservices",{"_index":320,"title":{},"body":{"modules/ModelsModule.html":{}}}],["modelsservices",{"_index":318,"title":{},"body":{"modules/ModelsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{},"modules/SocketModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{},"modules/SocketModule.html":{},"overview.html":{}}}],["modules",{"_index":673,"title":{"modules.html":{}},"body":{}}],["more",{"_index":661,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":592,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":667,"title":{},"body":{"index.html":{}}}],["n",{"_index":346,"title":{},"body":{"injectables/PreferSettingService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["namespace",{"_index":424,"title":{},"body":{"injectables/RegisterService.html":{}}}],["nest",{"_index":626,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":671,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"modules/ModelsModule.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"modules/SocketModule.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["nestjs/websockets",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"coverage.html":{}}}],["node",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["node.js",{"_index":614,"title":{},"body":{"index.html":{}}}],["npm",{"_index":630,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":469,"title":{},"body":{"classes/Socket.html":{},"classes/User.html":{}}}],["number",{"_index":106,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["open",{"_index":649,"title":{},"body":{"index.html":{}}}],["option",{"_index":348,"title":{},"body":{"injectables/PreferSettingService.html":{},"injectables/SocketService.html":{},"injectables/UserService.html":{}}}],["ormconfig",{"_index":569,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["overview",{"_index":675,"title":{"overview.html":{}},"body":{}}],["package",{"_index":580,"title":{"dependencies.html":{}},"body":{}}],["pass",{"_index":609,"title":{},"body":{"miscellaneous/functions.html":{}}}],["password",{"_index":55,"title":{},"body":{"injectables/AuthService.html":{},"controllers/LoginController.html":{},"injectables/LoginService.html":{},"controllers/RegisterController.html":{},"injectables/RegisterService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":659,"title":{},"body":{"index.html":{}}}],["port",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":237,"title":{},"body":{"controllers/LoginController.html":{},"controllers/RegisterController.html":{}}}],["post('login",{"_index":232,"title":{},"body":{"controllers/LoginController.html":{}}}],["post('logout",{"_index":235,"title":{},"body":{"controllers/LoginController.html":{}}}],["prefer_setting_id",{"_index":324,"title":{},"body":{"classes/PreferSetting.html":{}}}],["prefersetting",{"_index":321,"title":{"classes/PreferSetting.html":{}},"body":{"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"coverage.html":{}}}],["prefersetting_repository",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefersettingcontent",{"_index":345,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["prefersettingrepository",{"_index":340,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["prefersettingservice",{"_index":258,"title":{"injectables/PreferSettingService.html":{}},"body":{"injectables/LoginService.html":{},"modules/ModelsModule.html":{},"injectables/PreferSettingService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["primarycolumn",{"_index":130,"title":{},"body":{"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/GroupRelationship.html":{}}}],["primarygeneratedcolumn",{"_index":119,"title":{},"body":{"classes/Expression.html":{},"classes/Group.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":180,"title":{},"body":{"classes/Group.html":{},"classes/User.html":{}}}],["private",{"_index":68,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["production",{"_index":639,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":613,"title":{},"body":{"index.html":{}}}],["project",{"_index":650,"title":{},"body":{"index.html":{}}}],["promise",{"_index":57,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["provide",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConnectionModule.html":{},"modules/LoginModule.html":{},"modules/ModelsModule.html":{},"modules/RegisterModule.html":{},"modules/SocketModule.html":{},"overview.html":{}}}],["random_avatar_id",{"_index":360,"title":{},"body":{"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{}}}],["random_avatar_url",{"_index":361,"title":{},"body":{"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{}}}],["randomavatar",{"_index":358,"title":{"interfaces/RandomAvatar.html":{}},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"coverage.html":{}}}],["randomavatars",{"_index":362,"title":{"classes/RandomAvatars.html":{}},"body":{"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"coverage.html":{}}}],["randomavatars_repository",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomavatarservice",{"_index":400,"title":{},"body":{"injectables/RegisterService.html":{}}}],["randomavatarsrepository",{"_index":365,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["randomavatarsservice",{"_index":313,"title":{"injectables/RandomAvatarsService.html":{}},"body":{"modules/ModelsModule.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"injectables/RegisterService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["randomavatarurl",{"_index":411,"title":{},"body":{"injectables/RegisterService.html":{}}}],["randomnum",{"_index":368,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["read",{"_index":660,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":384,"title":{},"body":{"controllers/RegisterController.html":{},"injectables/RegisterService.html":{}}}],["register(@body('username",{"_index":390,"title":{},"body":{"controllers/RegisterController.html":{}}}],["register(username",{"_index":385,"title":{},"body":{"controllers/RegisterController.html":{},"injectables/RegisterService.html":{}}}],["register.controller",{"_index":396,"title":{},"body":{"modules/RegisterModule.html":{}}}],["register.service",{"_index":388,"title":{},"body":{"controllers/RegisterController.html":{},"modules/RegisterModule.html":{}}}],["register/register.module",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["registercontroller",{"_index":382,"title":{"controllers/RegisterController.html":{}},"body":{"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"coverage.html":{}}}],["registermodule",{"_index":13,"title":{"modules/RegisterModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RegisterModule.html":{},"modules.html":{},"overview.html":{}}}],["registerservice",{"_index":387,"title":{"injectables/RegisterService.html":{}},"body":{"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"coverage.html":{},"overview.html":{}}}],["registertime",{"_index":413,"title":{},"body":{"injectables/RegisterService.html":{}}}],["registerusermes",{"_index":433,"title":{"interfaces/RegisterUserMes.html":{}},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["registerusermes.user_name",{"_index":444,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":137,"title":{},"body":{"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"index.html":{}}}],["result",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"injectables/ExpressionService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"modules/ModelsModule.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"modules/SocketModule.html":{},"injectables/SocketService.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExpressionService.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"injectables/LoginService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{}}}],["rimraf",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":634,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":429,"title":{},"body":{"injectables/RegisterService.html":{}}}],["saltpassword",{"_index":409,"title":{},"body":{"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["saltrounds",{"_index":426,"title":{},"body":{"injectables/RegisterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scalable",{"_index":618,"title":{},"body":{"index.html":{}}}],["server",{"_index":619,"title":{},"body":{"index.html":{}}}],["side",{"_index":620,"title":{},"body":{"index.html":{}}}],["simple",{"_index":63,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["skip",{"_index":372,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["socket",{"_index":462,"title":{"classes/Socket.html":{}},"body":{"classes/Socket.html":{},"injectables/SocketService.html":{},"coverage.html":{}}}],["socket.io",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["socket_id",{"_index":466,"title":{},"body":{"classes/Socket.html":{}}}],["socket_repository",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["socketcontent",{"_index":490,"title":{},"body":{"injectables/SocketService.html":{}}}],["socketmodule",{"_index":472,"title":{"modules/SocketModule.html":{}},"body":{"modules/SocketModule.html":{},"modules.html":{},"overview.html":{}}}],["socketrepository",{"_index":485,"title":{},"body":{"injectables/SocketService.html":{}}}],["socketservice",{"_index":257,"title":{"injectables/SocketService.html":{}},"body":{"injectables/LoginService.html":{},"modules/ModelsModule.html":{},"injectables/SocketService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["socket并返回id",{"_index":495,"title":{},"body":{"injectables/SocketService.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConnectionModule.html":{},"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"injectables/ExpressionService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"modules/LoginModule.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"modules/ModelsModule.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"modules/RegisterModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"modules/SocketModule.html":{},"injectables/SocketService.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{},"index.html":{}}}],["sponsors",{"_index":653,"title":{},"body":{"index.html":{}}}],["src/.../config.ts",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../connection.provider.ts",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":607,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../models.providers.ts",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../models.services.ts",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../orm.config.ts",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../register.service.ts",{"_index":608,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":16,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module.ts",{"_index":35,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":38,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":49,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":59,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:39",{"_index":56,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":52,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":46,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/config/config.ts",{"_index":560,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/login/login.controller.ts",{"_index":228,"title":{},"body":{"controllers/LoginController.html":{},"coverage.html":{}}}],["src/login/login.controller.ts:18",{"_index":236,"title":{},"body":{"controllers/LoginController.html":{}}}],["src/login/login.controller.ts:9",{"_index":233,"title":{},"body":{"controllers/LoginController.html":{}}}],["src/login/login.module.ts",{"_index":251,"title":{},"body":{"modules/LoginModule.html":{}}}],["src/login/login.service.ts",{"_index":254,"title":{},"body":{"injectables/LoginService.html":{},"coverage.html":{}}}],["src/login/login.service.ts:11",{"_index":259,"title":{},"body":{"injectables/LoginService.html":{}}}],["src/login/login.service.ts:19",{"_index":260,"title":{},"body":{"injectables/LoginService.html":{}}}],["src/login/login.service.ts:71",{"_index":262,"title":{},"body":{"injectables/LoginService.html":{}}}],["src/main.ts",{"_index":565,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/register/register.controller.ts",{"_index":383,"title":{},"body":{"controllers/RegisterController.html":{},"coverage.html":{}}}],["src/register/register.controller.ts:12",{"_index":386,"title":{},"body":{"controllers/RegisterController.html":{}}}],["src/register/register.module.ts",{"_index":395,"title":{},"body":{"modules/RegisterModule.html":{}}}],["src/register/register.service.ts",{"_index":397,"title":{},"body":{"injectables/RegisterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/register/register.service.ts:13",{"_index":399,"title":{},"body":{"injectables/RegisterService.html":{}}}],["src/register/register.service.ts:21",{"_index":401,"title":{},"body":{"injectables/RegisterService.html":{}}}],["src/typeorm/config/orm.config.ts",{"_index":568,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/typeorm/connection/connection.module.ts",{"_index":98,"title":{},"body":{"modules/ConnectionModule.html":{}}}],["src/typeorm/connection/connection.provider.ts",{"_index":570,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/typeorm/models/entities/_group.entity.ts",{"_index":161,"title":{},"body":{"classes/Group.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/_group.entity.ts:10",{"_index":176,"title":{},"body":{"classes/Group.html":{}}}],["src/typeorm/models/entities/_group.entity.ts:13",{"_index":171,"title":{},"body":{"classes/Group.html":{}}}],["src/typeorm/models/entities/_group.entity.ts:16",{"_index":168,"title":{},"body":{"classes/Group.html":{}}}],["src/typeorm/models/entities/_group.entity.ts:19",{"_index":177,"title":{},"body":{"classes/Group.html":{}}}],["src/typeorm/models/entities/_group.entity.ts:22",{"_index":178,"title":{},"body":{"classes/Group.html":{}}}],["src/typeorm/models/entities/_group.entity.ts:7",{"_index":170,"title":{},"body":{"classes/Group.html":{}}}],["src/typeorm/models/entities/expression.entity.ts",{"_index":102,"title":{},"body":{"classes/Expression.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/expression.entity.ts:11",{"_index":113,"title":{},"body":{"classes/Expression.html":{}}}],["src/typeorm/models/entities/expression.entity.ts:14",{"_index":117,"title":{},"body":{"classes/Expression.html":{}}}],["src/typeorm/models/entities/expression.entity.ts:8",{"_index":111,"title":{},"body":{"classes/Expression.html":{}}}],["src/typeorm/models/entities/expression_collection.entity.ts",{"_index":124,"title":{},"body":{"classes/ExpressionCollection.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/expression_collection.entity.ts:11",{"_index":127,"title":{},"body":{"classes/ExpressionCollection.html":{}}}],["src/typeorm/models/entities/expression_collection.entity.ts:7",{"_index":129,"title":{},"body":{"classes/ExpressionCollection.html":{}}}],["src/typeorm/models/entities/friendship.entity.ts",{"_index":146,"title":{},"body":{"classes/Friendship.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/friendship.entity.ts:11",{"_index":158,"title":{},"body":{"classes/Friendship.html":{}}}],["src/typeorm/models/entities/friendship.entity.ts:14",{"_index":154,"title":{},"body":{"classes/Friendship.html":{}}}],["src/typeorm/models/entities/friendship.entity.ts:17",{"_index":155,"title":{},"body":{"classes/Friendship.html":{}}}],["src/typeorm/models/entities/friendship.entity.ts:20",{"_index":156,"title":{},"body":{"classes/Friendship.html":{}}}],["src/typeorm/models/entities/friendship.entity.ts:23",{"_index":159,"title":{},"body":{"classes/Friendship.html":{}}}],["src/typeorm/models/entities/friendship.entity.ts:7",{"_index":157,"title":{},"body":{"classes/Friendship.html":{}}}],["src/typeorm/models/entities/group_relationship.entity.ts",{"_index":197,"title":{},"body":{"classes/GroupRelationship.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/group_relationship.entity.ts:11",{"_index":199,"title":{},"body":{"classes/GroupRelationship.html":{}}}],["src/typeorm/models/entities/group_relationship.entity.ts:14",{"_index":201,"title":{},"body":{"classes/GroupRelationship.html":{}}}],["src/typeorm/models/entities/group_relationship.entity.ts:17",{"_index":200,"title":{},"body":{"classes/GroupRelationship.html":{}}}],["src/typeorm/models/entities/group_relationship.entity.ts:7",{"_index":202,"title":{},"body":{"classes/GroupRelationship.html":{}}}],["src/typeorm/models/entities/message.entity.ts",{"_index":292,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/message.entity.ts:10",{"_index":305,"title":{},"body":{"classes/Message.html":{}}}],["src/typeorm/models/entities/message.entity.ts:13",{"_index":307,"title":{},"body":{"classes/Message.html":{}}}],["src/typeorm/models/entities/message.entity.ts:16",{"_index":308,"title":{},"body":{"classes/Message.html":{}}}],["src/typeorm/models/entities/message.entity.ts:19",{"_index":301,"title":{},"body":{"classes/Message.html":{}}}],["src/typeorm/models/entities/message.entity.ts:22",{"_index":303,"title":{},"body":{"classes/Message.html":{}}}],["src/typeorm/models/entities/message.entity.ts:25",{"_index":304,"title":{},"body":{"classes/Message.html":{}}}],["src/typeorm/models/entities/message.entity.ts:7",{"_index":306,"title":{},"body":{"classes/Message.html":{}}}],["src/typeorm/models/entities/prefer_setting.entity.ts",{"_index":322,"title":{},"body":{"classes/PreferSetting.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/prefer_setting.entity.ts:10",{"_index":330,"title":{},"body":{"classes/PreferSetting.html":{}}}],["src/typeorm/models/entities/prefer_setting.entity.ts:13",{"_index":332,"title":{},"body":{"classes/PreferSetting.html":{}}}],["src/typeorm/models/entities/prefer_setting.entity.ts:16",{"_index":331,"title":{},"body":{"classes/PreferSetting.html":{}}}],["src/typeorm/models/entities/prefer_setting.entity.ts:19",{"_index":328,"title":{},"body":{"classes/PreferSetting.html":{}}}],["src/typeorm/models/entities/prefer_setting.entity.ts:7",{"_index":329,"title":{},"body":{"classes/PreferSetting.html":{}}}],["src/typeorm/models/entities/random_avatars.entity.ts",{"_index":375,"title":{},"body":{"classes/RandomAvatars.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/random_avatars.entity.ts:10",{"_index":377,"title":{},"body":{"classes/RandomAvatars.html":{}}}],["src/typeorm/models/entities/random_avatars.entity.ts:7",{"_index":376,"title":{},"body":{"classes/RandomAvatars.html":{}}}],["src/typeorm/models/entities/socket.entity.ts",{"_index":463,"title":{},"body":{"classes/Socket.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/socket.entity.ts:10",{"_index":471,"title":{},"body":{"classes/Socket.html":{}}}],["src/typeorm/models/entities/socket.entity.ts:13",{"_index":470,"title":{},"body":{"classes/Socket.html":{}}}],["src/typeorm/models/entities/socket.entity.ts:7",{"_index":467,"title":{},"body":{"classes/Socket.html":{}}}],["src/typeorm/models/entities/theme.entity.ts",{"_index":502,"title":{},"body":{"classes/Theme.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/theme.entity.ts:10",{"_index":509,"title":{},"body":{"classes/Theme.html":{}}}],["src/typeorm/models/entities/theme.entity.ts:13",{"_index":510,"title":{},"body":{"classes/Theme.html":{}}}],["src/typeorm/models/entities/theme.entity.ts:16",{"_index":511,"title":{},"body":{"classes/Theme.html":{}}}],["src/typeorm/models/entities/theme.entity.ts:19",{"_index":512,"title":{},"body":{"classes/Theme.html":{}}}],["src/typeorm/models/entities/theme.entity.ts:22",{"_index":516,"title":{},"body":{"classes/Theme.html":{}}}],["src/typeorm/models/entities/theme.entity.ts:25",{"_index":515,"title":{},"body":{"classes/Theme.html":{}}}],["src/typeorm/models/entities/theme.entity.ts:7",{"_index":513,"title":{},"body":{"classes/Theme.html":{}}}],["src/typeorm/models/entities/theme_type.entity.ts",{"_index":518,"title":{},"body":{"classes/ThemeType.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/theme_type.entity.ts:10",{"_index":521,"title":{},"body":{"classes/ThemeType.html":{}}}],["src/typeorm/models/entities/theme_type.entity.ts:7",{"_index":520,"title":{},"body":{"classes/ThemeType.html":{}}}],["src/typeorm/models/entities/tone.entity.ts",{"_index":524,"title":{},"body":{"classes/Tone.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/tone.entity.ts:10",{"_index":528,"title":{},"body":{"classes/Tone.html":{}}}],["src/typeorm/models/entities/tone.entity.ts:13",{"_index":529,"title":{},"body":{"classes/Tone.html":{}}}],["src/typeorm/models/entities/tone.entity.ts:7",{"_index":527,"title":{},"body":{"classes/Tone.html":{}}}],["src/typeorm/models/entities/user.entity.ts",{"_index":530,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/typeorm/models/entities/user.entity.ts:11",{"_index":534,"title":{},"body":{"classes/User.html":{}}}],["src/typeorm/models/entities/user.entity.ts:14",{"_index":537,"title":{},"body":{"classes/User.html":{}}}],["src/typeorm/models/entities/user.entity.ts:17",{"_index":531,"title":{},"body":{"classes/User.html":{}}}],["src/typeorm/models/entities/user.entity.ts:20",{"_index":536,"title":{},"body":{"classes/User.html":{}}}],["src/typeorm/models/entities/user.entity.ts:23",{"_index":533,"title":{},"body":{"classes/User.html":{}}}],["src/typeorm/models/entities/user.entity.ts:26",{"_index":539,"title":{},"body":{"classes/User.html":{}}}],["src/typeorm/models/entities/user.entity.ts:29",{"_index":538,"title":{},"body":{"classes/User.html":{}}}],["src/typeorm/models/entities/user.entity.ts:32",{"_index":535,"title":{},"body":{"classes/User.html":{}}}],["src/typeorm/models/entities/user.entity.ts:8",{"_index":532,"title":{},"body":{"classes/User.html":{}}}],["src/typeorm/models/models.module.ts",{"_index":314,"title":{},"body":{"modules/ModelsModule.html":{}}}],["src/typeorm/models/models.providers.ts",{"_index":575,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/typeorm/models/models.services.ts",{"_index":576,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/typeorm/models/services/_group.service.ts",{"_index":183,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["src/typeorm/models/services/_group.service.ts:15",{"_index":222,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/typeorm/models/services/_group.service.ts:22",{"_index":223,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/typeorm/models/services/_group.service.ts:28",{"_index":225,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/typeorm/models/services/expression.service.ts",{"_index":134,"title":{},"body":{"injectables/ExpressionService.html":{},"coverage.html":{}}}],["src/typeorm/models/services/expression.service.ts:15",{"_index":140,"title":{},"body":{"injectables/ExpressionService.html":{}}}],["src/typeorm/models/services/expression.service.ts:9",{"_index":138,"title":{},"body":{"injectables/ExpressionService.html":{}}}],["src/typeorm/models/services/group_relationship.service.ts",{"_index":205,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"coverage.html":{}}}],["src/typeorm/models/services/group_relationship.service.ts:16",{"_index":218,"title":{},"body":{"injectables/GroupRelationshipService.html":{}}}],["src/typeorm/models/services/group_relationship.service.ts:25",{"_index":219,"title":{},"body":{"injectables/GroupRelationshipService.html":{}}}],["src/typeorm/models/services/prefer_setting.service.ts",{"_index":334,"title":{},"body":{"injectables/PreferSettingService.html":{},"coverage.html":{}}}],["src/typeorm/models/services/prefer_setting.service.ts:13",{"_index":343,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["src/typeorm/models/services/prefer_setting.service.ts:24",{"_index":347,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["src/typeorm/models/services/prefer_setting.service.ts:29",{"_index":342,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["src/typeorm/models/services/prefer_setting.service.ts:6",{"_index":339,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["src/typeorm/models/services/random_avatars.service.ts",{"_index":359,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{},"coverage.html":{}}}],["src/typeorm/models/services/random_avatars.service.ts:14",{"_index":380,"title":{},"body":{"injectables/RandomAvatarsService.html":{}}}],["src/typeorm/models/services/random_avatars.service.ts:20",{"_index":381,"title":{},"body":{"injectables/RandomAvatarsService.html":{}}}],["src/typeorm/models/services/socket.service.ts",{"_index":479,"title":{},"body":{"injectables/SocketService.html":{},"coverage.html":{}}}],["src/typeorm/models/services/socket.service.ts:13",{"_index":489,"title":{},"body":{"injectables/SocketService.html":{}}}],["src/typeorm/models/services/socket.service.ts:19",{"_index":492,"title":{},"body":{"injectables/SocketService.html":{}}}],["src/typeorm/models/services/socket.service.ts:24",{"_index":487,"title":{},"body":{"injectables/SocketService.html":{}}}],["src/typeorm/models/services/socket.service.ts:6",{"_index":484,"title":{},"body":{"injectables/SocketService.html":{}}}],["src/typeorm/models/services/user.service.ts",{"_index":434,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/typeorm/models/services/user.service.ts:29",{"_index":547,"title":{},"body":{"injectables/UserService.html":{}}}],["src/typeorm/models/services/user.service.ts:33",{"_index":548,"title":{},"body":{"injectables/UserService.html":{}}}],["src/typeorm/models/services/user.service.ts:39",{"_index":553,"title":{},"body":{"injectables/UserService.html":{}}}],["src/typeorm/models/services/user.service.ts:46",{"_index":549,"title":{},"body":{"injectables/UserService.html":{}}}],["src/typeorm/models/services/user.service.ts:54",{"_index":550,"title":{},"body":{"injectables/UserService.html":{}}}],["src/typeorm/models/services/user.service.ts:70",{"_index":552,"title":{},"body":{"injectables/UserService.html":{}}}],["src/websocket/websocket.module.ts",{"_index":477,"title":{},"body":{"modules/SocketModule.html":{}}}],["src/websocket/websocket.service.ts",{"_index":554,"title":{},"body":{"injectables/WebsocketService.html":{},"coverage.html":{}}}],["src/websocket/websocket.service.ts:4",{"_index":556,"title":{},"body":{"injectables/WebsocketService.html":{}}}],["src/websocket/websocket.service.ts:7",{"_index":557,"title":{},"body":{"injectables/WebsocketService.html":{}}}],["start",{"_index":635,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":638,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":640,"title":{},"body":{"index.html":{}}}],["started",{"_index":611,"title":{"index.html":{}},"body":{}}],["starter",{"_index":628,"title":{},"body":{"index.html":{}}}],["stay",{"_index":663,"title":{},"body":{"index.html":{}}}],["string",{"_index":48,"title":{},"body":{"injectables/AuthService.html":{},"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"controllers/LoginController.html":{},"injectables/LoginService.html":{},"classes/Message.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"controllers/RegisterController.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"injectables/WebsocketService.html":{}}}],["string,password",{"_index":446,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["support",{"_index":654,"title":{},"body":{"index.html":{}}}],["svg",{"_index":674,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":189,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RegisterUserMes.html":{},"injectables/SocketService.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["t,socketcontent",{"_index":498,"title":{},"body":{"injectables/SocketService.html":{}}}],["t,updatecontent",{"_index":460,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["table",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":373,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["test",{"_index":643,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":646,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":645,"title":{},"body":{"index.html":{}}}],["tests",{"_index":642,"title":{},"body":{"index.html":{}}}],["text",{"_index":300,"title":{},"body":{"classes/Message.html":{}}}],["thanks",{"_index":652,"title":{},"body":{"index.html":{}}}],["theme",{"_index":501,"title":{"classes/Theme.html":{}},"body":{"classes/Theme.html":{},"coverage.html":{}}}],["theme_background_url",{"_index":504,"title":{},"body":{"classes/Theme.html":{}}}],["theme_color",{"_index":505,"title":{},"body":{"classes/Theme.html":{}}}],["theme_font_color",{"_index":506,"title":{},"body":{"classes/Theme.html":{}}}],["theme_id",{"_index":325,"title":{},"body":{"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"classes/Theme.html":{}}}],["theme_opacity",{"_index":507,"title":{},"body":{"classes/Theme.html":{}}}],["theme_repository",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["theme_type_id",{"_index":508,"title":{},"body":{"classes/Theme.html":{},"classes/ThemeType.html":{}}}],["theme_type_name",{"_index":519,"title":{},"body":{"classes/ThemeType.html":{}}}],["themetype",{"_index":517,"title":{"classes/ThemeType.html":{}},"body":{"classes/ThemeType.html":{},"coverage.html":{}}}],["themetype_repository",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.authservice.decodetoken(accesstoken",{"_index":271,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.authservice.genjwt(username",{"_index":278,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.authservice.validatepassword(username",{"_index":277,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.authservice.validatetoken(accesstoken",{"_index":270,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.decodetoken(accesstoken",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.expressionrepository.find",{"_index":144,"title":{},"body":{"injectables/ExpressionService.html":{}}}],["this.getuserbasicmes({user_name",{"_index":443,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["this.grouprelationshiprepository.insert(grouprelationshipmes",{"_index":215,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{}}}],["this.grouprelationshipservice.creategrouprelationship",{"_index":421,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.grouprepository.count(checkoption",{"_index":191,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["this.grouprepository.findoneorfail",{"_index":195,"title":{},"body":{"interfaces/GroupMes.html":{},"injectables/GroupService.html":{}}}],["this.groupservice.getdefaultgroup",{"_index":420,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.loginservice.login(username,password,accesstoken",{"_index":245,"title":{},"body":{"controllers/LoginController.html":{}}}],["this.loginservice.logout(userid",{"_index":247,"title":{},"body":{"controllers/LoginController.html":{}}}],["this.prefersettingrepository.count(checkoption",{"_index":357,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["this.prefersettingrepository.insert",{"_index":353,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["this.prefersettingrepository.update(option,prefersettingcontent",{"_index":356,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["this.prefersettingservice.createdefaultprefersetting",{"_index":285,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.randomavatarservice.getrandomavatarurl",{"_index":412,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.randomavatarsrepository.count",{"_index":367,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["this.randomavatarsrepository.find",{"_index":371,"title":{},"body":{"interfaces/RandomAvatar.html":{},"injectables/RandomAvatarsService.html":{}}}],["this.registerservice.register(username,password",{"_index":391,"title":{},"body":{"controllers/RegisterController.html":{}}}],["this.socketrepository.count(checkoption",{"_index":500,"title":{},"body":{"injectables/SocketService.html":{}}}],["this.socketrepository.insert(socketcontent",{"_index":496,"title":{},"body":{"injectables/SocketService.html":{}}}],["this.socketrepository.update(option,socketcontent",{"_index":499,"title":{},"body":{"injectables/SocketService.html":{}}}],["this.socketservice.createsocket",{"_index":283,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.userrepository.count(checkoption",{"_index":440,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":447,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["this.userrepository.findone(option",{"_index":450,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["this.userrepository.insert(registerusermes",{"_index":442,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["this.userrepository.update(option,updatecontent",{"_index":461,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["this.userservice.checkuserexistence",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.checkuserexistence({user_name",{"_index":406,"title":{},"body":{"injectables/RegisterService.html":{}}}],["this.userservice.checkuserpassword(username",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbasicmes({user_id",{"_index":273,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.userservice.getuserbasicmes({user_name",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginService.html":{}}}],["this.userservice.updateuser",{"_index":286,"title":{},"body":{"injectables/LoginService.html":{}}}],["this.userservice.userregister",{"_index":415,"title":{},"body":{"injectables/RegisterService.html":{}}}],["throw",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{}}}],["to_user_id",{"_index":151,"title":{},"body":{"classes/Friendship.html":{}}}],["token",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginService.html":{}}}],["tokenexpirestime",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tone",{"_index":523,"title":{"classes/Tone.html":{}},"body":{"classes/Tone.html":{},"coverage.html":{}}}],["tone_id",{"_index":326,"title":{},"body":{"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"classes/Tone.html":{}}}],["tone_if",{"_index":327,"title":{},"body":{"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{}}}],["tone_name",{"_index":525,"title":{},"body":{"classes/Tone.html":{}}}],["tone_repository",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tone_url",{"_index":526,"title":{},"body":{"classes/Tone.html":{}}}],["top_if",{"_index":152,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/RegisterService.html":{}}}],["touch",{"_index":664,"title":{},"body":{"index.html":{}}}],["true",{"_index":175,"title":{},"body":{"classes/Group.html":{},"interfaces/GroupMes.html":{},"injectables/GroupService.html":{},"injectables/PreferSettingService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"injectables/SocketService.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{}}}],["twitter",{"_index":670,"title":{},"body":{"index.html":{}}}],["type",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeorm",{"_index":121,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"injectables/ExpressionService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"interfaces/GroupMes.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/GroupService.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"injectables/PreferSettingService.html":{},"interfaces/RandomAvatar.html":{},"classes/RandomAvatars.html":{},"injectables/RandomAvatarsService.html":{},"interfaces/RegisterUserMes.html":{},"classes/Socket.html":{},"injectables/SocketService.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm/models/models.module",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LoginModule.html":{},"modules/RegisterModule.html":{}}}],["typeorm/models/services/_group.service",{"_index":404,"title":{},"body":{"injectables/RegisterService.html":{}}}],["typeorm/models/services/group_relationship.service",{"_index":403,"title":{},"body":{"injectables/RegisterService.html":{}}}],["typeorm/models/services/prefer_setting.service",{"_index":267,"title":{},"body":{"injectables/LoginService.html":{}}}],["typeorm/models/services/random_avatars.service",{"_index":402,"title":{},"body":{"injectables/RegisterService.html":{}}}],["typeorm/models/services/socket.service",{"_index":266,"title":{},"body":{"injectables/LoginService.html":{}}}],["typeorm/models/services/user.service",{"_index":64,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{}}}],["types/bcryptjs",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":627,"title":{},"body":{"index.html":{}}}],["unique",{"_index":174,"title":{},"body":{"classes/Group.html":{},"classes/Socket.html":{},"classes/User.html":{}}}],["unit",{"_index":641,"title":{},"body":{"index.html":{}}}],["updatecontent",{"_index":551,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprefersetting",{"_index":337,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["updateprefersetting(option",{"_index":344,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["updatesocket",{"_index":482,"title":{},"body":{"injectables/SocketService.html":{}}}],["updatesocket(option",{"_index":491,"title":{},"body":{"injectables/SocketService.html":{}}}],["updateuser",{"_index":544,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(option",{"_index":459,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["usefactory",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":435,"title":{"classes/User.html":{}},"body":{"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user,group,socket,expression,theme,themetype,tone,message,prefersetting,friendship,grouprelationship,expressioncollection,randomavatars",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.service",{"_index":206,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{}}}],["user.user_avatar",{"_index":453,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user.user_id",{"_index":451,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user.user_lastlogin_time",{"_index":455,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user.user_name",{"_index":452,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user.user_prefersetting_id",{"_index":458,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user.user_reg_time",{"_index":454,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user.user_socketid",{"_index":457,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user.user_state",{"_index":456,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user_avatar",{"_index":417,"title":{},"body":{"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user_id",{"_index":125,"title":{},"body":{"classes/ExpressionCollection.html":{},"classes/GroupRelationship.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user_id,group_id",{"_index":213,"title":{},"body":{"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{}}}],["user_id,user_socketid",{"_index":279,"title":{},"body":{"injectables/LoginService.html":{}}}],["user_lastlogin_time",{"_index":287,"title":{},"body":{"injectables/LoginService.html":{},"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user_name",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user_prefersetting_id",{"_index":280,"title":{},"body":{"injectables/LoginService.html":{},"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user_reg_time",{"_index":418,"title":{},"body":{"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user_repository",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_saltpassword",{"_index":416,"title":{},"body":{"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user_socketid",{"_index":282,"title":{},"body":{"injectables/LoginService.html":{},"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["user_state",{"_index":288,"title":{},"body":{"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"classes/User.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["userbasicmes",{"_index":272,"title":{"interfaces/UserBasicMes.html":{}},"body":{"injectables/LoginService.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userbasicmes.user_id",{"_index":422,"title":{},"body":{"injectables/RegisterService.html":{}}}],["userexistence",{"_index":405,"title":{},"body":{"injectables/RegisterService.html":{}}}],["userid",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{},"controllers/LoginController.html":{},"injectables/LoginService.html":{}}}],["username",{"_index":53,"title":{},"body":{"injectables/AuthService.html":{},"controllers/LoginController.html":{},"injectables/LoginService.html":{},"controllers/RegisterController.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["username})).user_id",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["userregister",{"_index":545,"title":{},"body":{"injectables/UserService.html":{}}}],["userregister(registerusermes",{"_index":441,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":438,"title":{},"body":{"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":45,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/GroupRelationshipMes.html":{},"injectables/GroupRelationshipService.html":{},"injectables/LoginService.html":{},"modules/ModelsModule.html":{},"injectables/RegisterService.html":{},"interfaces/RegisterUserMes.html":{},"interfaces/UserBasicMes.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["userstate",{"_index":414,"title":{},"body":{"injectables/RegisterService.html":{}}}],["utils",{"_index":425,"title":{},"body":{"injectables/RegisterService.html":{}}}],["utils.gensaltpassword(password",{"_index":410,"title":{},"body":{"injectables/RegisterService.html":{}}}],["v",{"_index":352,"title":{},"body":{"injectables/PreferSettingService.html":{},"injectables/SocketService.html":{}}}],["v.identifiers[0]._id",{"_index":497,"title":{},"body":{"injectables/SocketService.html":{}}}],["v.identifiers[0].prefer_setting_id",{"_index":355,"title":{},"body":{"injectables/PreferSettingService.html":{}}}],["validatepassword",{"_index":42,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatepassword(username",{"_index":54,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatetoken",{"_index":43,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatetoken(accesstoken",{"_index":58,"title":{},"body":{"injectables/AuthService.html":{}}}],["varchar",{"_index":172,"title":{},"body":{"classes/Group.html":{},"classes/Theme.html":{},"classes/User.html":{}}}],["variable",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":681,"title":{"miscellaneous/variables.html":{}},"body":{}}],["watch",{"_index":636,"title":{},"body":{"index.html":{}}}],["web",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{}}}],["website",{"_index":668,"title":{},"body":{"index.html":{}}}],["websocket.service",{"_index":478,"title":{},"body":{"modules/SocketModule.html":{}}}],["websocketservice",{"_index":476,"title":{"injectables/WebsocketService.html":{}},"body":{"modules/SocketModule.html":{},"injectables/WebsocketService.html":{},"coverage.html":{},"overview.html":{}}}],["width",{"_index":109,"title":{},"body":{"classes/Expression.html":{},"classes/ExpressionCollection.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupRelationship.html":{},"classes/Message.html":{},"classes/PreferSetting.html":{},"classes/RandomAvatars.html":{},"classes/Socket.html":{},"classes/Theme.html":{},"classes/ThemeType.html":{},"classes/Tone.html":{},"classes/User.html":{}}}],["you'd",{"_index":657,"title":{},"body":{"index.html":{}}}],["zjb13777838499",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    模块列表\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nLoginModule\n\nLoginModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nLoginModule->AppModule\n\n\n\n\n\nModelsModule\n\nModelsModule\n\nAppModule -->\n\nModelsModule->AppModule\n\n\n\n\n\nRegisterModule\n\nRegisterModule\n\nAppModule -->\n\nRegisterModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        放大\n        重置\n        缩小\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            文件\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    引入\n                    \n                        \n                            LoginModule\n                        \n                        \n                            ModelsModule\n                        \n                        \n                            RegisterModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport {RegisterModule} from \"./register/register.module\";\nimport {LoginModule} from \"./login/login.module\";\nimport {ModelsModule} from \"./typeorm/models/models.module\";\n\n@Module({\n    imports: [ModelsModule,RegisterModule,LoginModule],\n    exports: [],\n    providers: [],\n    controllers: []\n})\nexport class AppModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    模块列表\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nModelsModule\n\nModelsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nModelsModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        放大\n        重置\n        缩小\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            文件\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    提供商列表\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    引入\n                    \n                        \n                            ModelsModule\n                        \n                    \n                \n                \n                    导出\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { AuthService } from \"./auth.service\";\nimport { ModelsModule } from \"../typeorm/models/models.module\";\n\n\n@Module({\n    imports: [ModelsModule],\n    providers: [AuthService],\n    exports: [AuthService]\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                genJWT\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                            \n                                    Async\n                                validateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                被定义在 src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decodeToken\n                        \n                        \n                    \n                \n            \n            \n                \ndecodeToken(accessToken: string)\n                \n            \n\n\n            \n                \n                    被定义在 src/auth/auth.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            genJWT\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    genJWT(userName: string)\n                \n            \n\n\n            \n                \n                    被定义在 src/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(userName: string, password: string)\n                \n            \n\n\n            \n                \n                    被定义在 src/auth/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateToken(accessToken: string)\n                \n            \n\n\n            \n                \n                    被定义在 src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from \"@nestjs/common\";\n\nimport * as jwt from \"jwt-simple\";\n\nimport { UserService } from \"../typeorm/models/services/user.service\";\nimport { jwtConfig } from \"../config/config\";\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly userService: UserService\n    ) {}\n\n    // 解码Token\n    decodeToken(accessToken: string) {\n        try {\n            return jwt.decode(accessToken,jwtConfig.jwtSecret);\n        }catch(e) {\n            throw new HttpException(\"无效Token，此为非法登录\",HttpStatus.FORBIDDEN);\n        }\n    }\n\n    // 验证Token\n    async validateToken(accessToken: string): Promise {\n        const decodedToken  = this.decodeToken(accessToken);\n        console.log('decodedToken',decodedToken);\n        if(decodedToken.expires  {\n        return this.userService.checkUserExistence({ user_name: userName }) &&\n            this.userService.checkUserPassword(userName, password);\n    }\n\n    // 生成JWT\n    async genJWT(userName: string) {\n        const userId = (await this.userService.getUserBasicMes({user_name: userName})).user_id;\n        const payload = {\n            userId,\n            enviroment: 'web',\n            expires: Date.now() + jwtConfig.tokenExpiresTime\n        };\n        const token = jwt.encode(payload,jwtConfig.jwtSecret);\n        return token;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"modules/ConnectionModule.html":{"url":"modules/ConnectionModule.html","title":"module - ConnectionModule","body":"\n                   \n\n\n\n\n    模块列表\n    ConnectionModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            文件\n        \n        \n            src/typeorm/connection/connection.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import {Module} from \"@nestjs/common\";\n\nimport {connectionProvider} from \"./connection.provider\";\n\n@Module({\n    providers: [connectionProvider],\n    exports: [connectionProvider]\n})\nexport class ConnectionModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/Expression.html":{"url":"classes/Expression.html","title":"class - Expression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  Expression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/expression.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                expression_id\n                            \n                            \n                                expression_type\n                            \n                            \n                                expression_url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expression_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/expression.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expression_type\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/expression.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expression_url\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 255})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/expression.entity.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n\n@Entity()\nexport class Expression {\n    @Column({type: \"int\", width: 10})\n    @PrimaryGeneratedColumn()\n    expression_id: number;\n\n    @Column({type: \"int\", width: 1})\n    expression_type: number;\n\n    @Column({type: \"char\", length: 255})\n    expression_url: string;\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/ExpressionCollection.html":{"url":"classes/ExpressionCollection.html","title":"class - ExpressionCollection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  ExpressionCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/expression_collection.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                expression_id\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expression_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/expression_collection.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100})@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/expression_collection.entity.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryColumn, Column } from \"typeorm\";\n\n@Entity(\"expression_collection\")\nexport class ExpressionCollection {\n    @Column({type: \"char\", length: 100})\n    @PrimaryColumn()\n    user_id: string;\n\n    @Column({type: \"int\", width: 10})\n    @PrimaryColumn()\n    expression_id: number;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/ExpressionService.html":{"url":"injectables/ExpressionService.html","title":"injectable - ExpressionService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  ExpressionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/expression.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(expressionRepository: Repository)\n                    \n                \n                        \n                            \n                                被定义在 src/typeorm/models/services/expression.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        expressionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/expression.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        返回 :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\n\nimport { Expression } from \"../entities/expression.entity\";\n\n\n\n@Injectable()\nexport class ExpressionService {\n    constructor(\n        @Inject('EXPRESSION_REPOSITORY')\n        private readonly expressionRepository: Repository\n    ){}\n\n    async findAll(): Promise {\n        return this.expressionRepository.find();\n    }\n}\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/Friendship.html":{"url":"classes/Friendship.html","title":"class - Friendship","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  Friendship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/friendship.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                add_friend_time\n                            \n                            \n                                agree_time\n                            \n                            \n                                friendship_type\n                            \n                            \n                                from_user_id\n                            \n                            \n                                to_user_id\n                            \n                            \n                                top_if\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            add_friend_time\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/friendship.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            agree_time\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/friendship.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            friendship_type\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/friendship.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            from_user_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100})@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/friendship.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            to_user_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100})@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/friendship.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            top_if\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/friendship.entity.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class Friendship {\n    @Column({type: \"char\", length: 100})\n    @PrimaryColumn()\n    from_user_id: string;\n\n    @Column({type: \"char\", length: 100})\n    @PrimaryColumn()\n    to_user_id: string;\n\n    @Column({type: \"datetime\"})\n    add_friend_time: string;\n\n    @Column({type: \"datetime\"})\n    agree_time: string;\n\n    @Column({type: \"int\", width: 1})\n    friendship_type: number;\n\n    @Column({type: \"int\", width: 1})\n    top_if: number;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/Group.html":{"url":"classes/Group.html","title":"class - Group","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  Group\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/_group.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                group_avatar\n                            \n                            \n                                group_id\n                            \n                            \n                                group_manager_id\n                            \n                            \n                                group_name\n                            \n                            \n                                group_reg_time\n                            \n                            \n                                group_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group_avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 255})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/_group.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100})@PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/_group.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group_manager_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/_group.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group_name\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'varchar', length: 50, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/_group.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group_reg_time\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/_group.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group_type\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/_group.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity(\"_group\")\nexport class Group {\n    @Column({type: \"char\", length: 100})\n    @PrimaryGeneratedColumn(\"uuid\")\n    group_id: string;\n\n    @Column({type: \"varchar\", length: 50, unique: true})\n    group_name: string;\n\n    @Column({type: \"char\", length: 100})\n    group_manager_id: string;\n\n    @Column({type: \"char\", length: 255})\n    group_avatar: string;\n\n    @Column({type: \"datetime\"})\n    group_reg_time: string;\n\n    @Column({type: \"int\", width: 1})\n    group_type: number;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"interfaces/GroupMes.html":{"url":"interfaces/GroupMes.html","title":"interface - GroupMes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  接口\n  GroupMes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/_group.service.ts\n        \n\n\n\n        \n            索引\n            \n                \n                    \n                        \n                            属性列表\n                        \n                    \n                    \n                        \n                            \n                                \n                                        group_avatar\n                                \n                                \n                                        group_id\n                                \n                                \n                                        group_manager_id\n                                \n                                \n                                        group_name\n                                \n                                \n                                        group_reg_time\n                                \n                                \n                                        group_type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                属性列表\n                    \n                        \n                                \n                                    \n                                        \n                                        group_avatar\n                                    \n                                \n                                \n                                    \n                                        group_avatar:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_id\n                                    \n                                \n                                \n                                    \n                                        group_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_manager_id\n                                    \n                                \n                                \n                                    \n                                        group_manager_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_name\n                                    \n                                \n                                \n                                    \n                                        group_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_reg_time\n                                    \n                                \n                                \n                                    \n                                        group_reg_time:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_type\n                                    \n                                \n                                \n                                    \n                                        group_type:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { Group } from \"../entities/_group.entity\";\n\ninterface GroupMes {\n    group_id: string;\n    group_name: string;\n    group_manager_id: string;\n    group_avatar: string;\n    group_reg_time: string;\n    group_type: number;\n}\n\n@Injectable()\nexport class GroupService {\n    constructor(\n        @Inject('GROUP_REPOSITORY') \n        private readonly groupRepository: Repository\n    ) {}\n\n    // 检查群组是否已存在\n    async checkGroupExistence(checkOption: T) {\n        const count = await this.groupRepository.count(checkOption);\n        return count === 0 ? false : true;\n    }\n\n    // 得到默认分组信息，如果没有找到则返回拒绝原因\n    async getDefaultGroup(): Promise {\n        return await this.groupRepository.findOneOrFail({\n            group_type: 0\n        })\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/GroupRelationship.html":{"url":"classes/GroupRelationship.html","title":"class - GroupRelationship","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  GroupRelationship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/group_relationship.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                group_id\n                            \n                            \n                                group_member_type\n                            \n                            \n                                top_if\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100})@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/group_relationship.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group_member_type\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 10})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/group_relationship.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            top_if\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/group_relationship.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100})@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/group_relationship.entity.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryColumn, Column } from \"typeorm\";\n\n@Entity(\"group_relationship\")\nexport class GroupRelationship {\n    @Column({type: \"char\", length: 100})\n    @PrimaryColumn()\n    user_id: string;\n\n    @Column({type: \"char\", length: 100})\n    @PrimaryColumn()\n    group_id: string;\n\n    @Column({type: \"int\", width: 1})\n    top_if: number;\n\n    @Column({type: \"char\", length: 10})\n    group_member_type: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"interfaces/GroupRelationshipMes.html":{"url":"interfaces/GroupRelationshipMes.html","title":"interface - GroupRelationshipMes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  接口\n  GroupRelationshipMes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/group_relationship.service.ts\n        \n\n\n\n        \n            索引\n            \n                \n                    \n                        \n                            属性列表\n                        \n                    \n                    \n                        \n                            \n                                \n                                        group_id\n                                \n                                \n                                        group_member_type\n                                \n                                \n                                        top_if\n                                \n                                \n                                        user_id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                属性列表\n                    \n                        \n                                \n                                    \n                                        \n                                        group_id\n                                    \n                                \n                                \n                                    \n                                        group_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group_member_type\n                                    \n                                \n                                \n                                    \n                                        group_member_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top_if\n                                    \n                                \n                                \n                                    \n                                        top_if:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                    \n                                \n                                \n                                    \n                                        user_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\n\nimport { UserService } from \"./user.service\";\nimport { GroupRelationship } from \"../entities/group_relationship.entity\";\nimport { GroupService } from \"./_group.service\";\n\ninterface GroupRelationshipMes {\n    user_id: string;\n    group_id: string;\n    top_if: number;\n    group_member_type: string;\n}\n\n@Injectable()\nexport class GroupRelationshipService {\n    constructor(\n        @Inject('GROUPRELATIONSHIP_REPOSITORY')\n        private readonly groupRelationshipRepository: Repository,\n        private readonly groupService: GroupService,\n        private readonly userService: UserService\n    ){}\n\n    // 添加群组关系\n    async createGroupRelationship(groupRelationshipMes: GroupRelationshipMes) {\n        let {user_id,group_id} = groupRelationshipMes;\n        if(this.userService.checkUserExistence({user_id})&&this.groupService.checkGroupExistence({group_id})) {\n            await this.groupRelationshipRepository.insert(groupRelationshipMes);\n        }\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/GroupRelationshipService.html":{"url":"injectables/GroupRelationshipService.html","title":"injectable - GroupRelationshipService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  GroupRelationshipService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/group_relationship.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createGroupRelationship\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(groupRelationshipRepository: Repository, groupService: GroupService, userService: UserService)\n                    \n                \n                        \n                            \n                                被定义在 src/typeorm/models/services/group_relationship.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        groupRelationshipRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupService\n                                                  \n                                                        \n                                                                        GroupService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createGroupRelationship\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createGroupRelationship(groupRelationshipMes: GroupRelationshipMes)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/group_relationship.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    groupRelationshipMes\n                                    \n                                                GroupRelationshipMes\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\n\nimport { UserService } from \"./user.service\";\nimport { GroupRelationship } from \"../entities/group_relationship.entity\";\nimport { GroupService } from \"./_group.service\";\n\ninterface GroupRelationshipMes {\n    user_id: string;\n    group_id: string;\n    top_if: number;\n    group_member_type: string;\n}\n\n@Injectable()\nexport class GroupRelationshipService {\n    constructor(\n        @Inject('GROUPRELATIONSHIP_REPOSITORY')\n        private readonly groupRelationshipRepository: Repository,\n        private readonly groupService: GroupService,\n        private readonly userService: UserService\n    ){}\n\n    // 添加群组关系\n    async createGroupRelationship(groupRelationshipMes: GroupRelationshipMes) {\n        let {user_id,group_id} = groupRelationshipMes;\n        if(this.userService.checkUserExistence({user_id})&&this.groupService.checkGroupExistence({group_id})) {\n            await this.groupRelationshipRepository.insert(groupRelationshipMes);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/GroupService.html":{"url":"injectables/GroupService.html","title":"injectable - GroupService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  GroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/_group.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkGroupExistence\n                            \n                            \n                                    Async\n                                getDefaultGroup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(groupRepository: Repository)\n                    \n                \n                        \n                            \n                                被定义在 src/typeorm/models/services/_group.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        groupRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkGroupExistence\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkGroupExistence(checkOption: T)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/_group.service.ts:22\n                \n            \n\n            \n                \n                    类型参数 :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    checkOption\n                                    \n                                            T\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getDefaultGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDefaultGroup()\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/_group.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        返回 :         Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { Group } from \"../entities/_group.entity\";\n\ninterface GroupMes {\n    group_id: string;\n    group_name: string;\n    group_manager_id: string;\n    group_avatar: string;\n    group_reg_time: string;\n    group_type: number;\n}\n\n@Injectable()\nexport class GroupService {\n    constructor(\n        @Inject('GROUP_REPOSITORY') \n        private readonly groupRepository: Repository\n    ) {}\n\n    // 检查群组是否已存在\n    async checkGroupExistence(checkOption: T) {\n        const count = await this.groupRepository.count(checkOption);\n        return count === 0 ? false : true;\n    }\n\n    // 得到默认分组信息，如果没有找到则返回拒绝原因\n    async getDefaultGroup(): Promise {\n        return await this.groupRepository.findOneOrFail({\n            group_type: 0\n        })\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"controllers/LoginController.html":{"url":"controllers/LoginController.html","title":"controller - LoginController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LoginController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/login/login.controller.ts\n        \n\n\n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                loginOut\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userName: string, password: string, accessToken: string)\n                \n            \n\n            \n                \n                    装饰器列表 : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    被定义在 src/login/login.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginOut(userId: string)\n                \n            \n\n            \n                \n                    装饰器列表 : \n                    \n                    @Post('logout')\n                \n            \n\n            \n                \n                    被定义在 src/login/login.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from \"@nestjs/common\";\nimport { LoginService } from \"./login.service\";\n\n@Controller()\nexport class LoginController {\n    constructor(private readonly loginService: LoginService) { }\n\n    @Post('login')\n    async login(\n        @Body('userName') userName: string,\n        @Body('password') password: string,\n        @Body('accessToken') accessToken: string\n    ) {\n        return await this.loginService.login(userName,password,accessToken);\n    }\n\n    @Post('logout')\n    async loginOut(\n        @Body('userId') userId: string\n    ) {\n        return await this.loginService.logout(userId);\n    } \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"modules/LoginModule.html":{"url":"modules/LoginModule.html","title":"module - LoginModule","body":"\n                   \n\n\n\n\n    模块列表\n    LoginModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoginModule\n\n\n\ncluster_LoginModule_imports\n\n\n\ncluster_LoginModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nLoginModule\n\nLoginModule\n\nLoginModule -->\n\nAuthModule->LoginModule\n\n\n\n\n\nModelsModule\n\nModelsModule\n\nLoginModule -->\n\nModelsModule->LoginModule\n\n\n\n\n\nLoginService\n\nLoginService\n\nLoginModule -->\n\nLoginService->LoginModule\n\n\n\n\n\n\n    \n    \n    \n        放大\n        重置\n        缩小\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            文件\n        \n        \n            src/login/login.module.ts\n        \n\n\n\n\n        \n            \n                \n                    提供商列表\n                    \n                        \n                            LoginService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LoginController\n                        \n                    \n                \n                \n                    引入\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ModelsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { ModelsModule } from \"../typeorm/models/models.module\";\nimport { AuthModule } from \"../auth/auth.module\";\nimport { LoginController } from \"./login.controller\";\nimport { LoginService } from \"./login.service\";\n\n@Module({\n    imports: [ModelsModule, AuthModule],\n    controllers: [LoginController],\n    providers: [LoginService]\n})\nexport class LoginModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/LoginService.html":{"url":"injectables/LoginService.html","title":"injectable - LoginService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  LoginService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/login/login.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(authService: AuthService, userService: UserService, socketService: SocketService, preferSettingService: PreferSettingService)\n                    \n                \n                        \n                            \n                                被定义在 src/login/login.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                                \n                                                        socketService\n                                                  \n                                                        \n                                                                        SocketService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                                \n                                                        preferSettingService\n                                                  \n                                                        \n                                                                        PreferSettingService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userName: string, password: string, accessToken: string)\n                \n            \n\n\n            \n                \n                    被定义在 src/login/login.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    被定义在 src/login/login.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from \"@nestjs/common\";\n\nimport * as bcrypt from \"bcryptjs\";\n\nimport { AuthService } from \"../auth/auth.service\";\nimport { UserService } from \"../typeorm/models/services/user.service\";\nimport { SocketService } from \"../typeorm/models/services/socket.service\";\nimport { PreferSettingService } from \"../typeorm/models/services/prefer_setting.service\";\n\n@Injectable()\nexport class LoginService {\n    constructor(\n        private readonly authService: AuthService,\n        private readonly userService: UserService,\n        private readonly socketService: SocketService,\n        private readonly preferSettingService: PreferSettingService\n    ) {}\n\n    async login(userName: string, password: string, accessToken: string): Promise {\n        const datetime: string = new Date().toLocaleString();\n\n        if (accessToken) {\n            if(await this.authService.validateToken(accessToken)) {\n                const {userId} = this.authService.decodeToken(accessToken);\n                const userBasicMes = await this.userService.getUserBasicMes({user_id: userId});\n                return {\n                    error_code: 0,\n                    message: \"登录成功\",\n                    userBasicMes\n                }\n            }\n        }\n        else if(userName && password){\n            if(await this.authService.validatePassword(userName, password)) {\n                const token = await this.authService.genJWT(userName);\n                let userBasicMes = await this.userService.getUserBasicMes({user_name: userName});\n                let {user_id,user_socketId, user_preferSetting_id} = userBasicMes;\n                if(!user_socketId) {\n                     user_socketId = await this.socketService.createSocket({});\n                }\n                if(!user_preferSetting_id) {\n                    user_preferSetting_id = await this.preferSettingService.createDefaultPreferSetting();\n                }\n                await this.userService.updateUser({\n                    user_id\n                },{\n                    user_lastLogin_time: datetime,\n                    user_state: 1,\n                    user_socketId,\n                    user_preferSetting_id\n                })\n                userBasicMes = await this.userService.getUserBasicMes({user_name: userName});\n                return {\n                    error_code: 0,\n                    data: {\n                        message: '登录成功',\n                        accessToken: token,\n                        userBasicMes\n                    }\n                }\n            }\n            else {\n                throw new HttpException(\"用户名或密码不正确\",HttpStatus.FORBIDDEN);\n            }\n        }\n        else {\n            throw new HttpException(\"非法登录\",HttpStatus.FORBIDDEN);\n        }\n    }\n\n    async logout(userId: string): Promise {\n        this.userService.updateUser({\n            user_id: userId\n        },{\n            user_state: 0\n        })\n        return {\n            error_code: 0,\n            data: {\n                message: \"退出登录成功\"\n            }\n        }\n    }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/message.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                message_content\n                            \n                            \n                                message_content_type\n                            \n                            \n                                message_created_time\n                            \n                            \n                                message_From_id\n                            \n                            \n                                message_id\n                            \n                            \n                                message_to_id\n                            \n                            \n                                message_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message_content\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/message.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message_content_type\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 20})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/message.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message_created_time\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/message.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message_From_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/message.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/message.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message_to_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/message.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message_type\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/message.entity.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class Message {\n    @Column({type: \"int\", width: 10})\n    @PrimaryGeneratedColumn()\n    message_id: number;\n\n    @Column({type: \"char\", length: 100})\n    message_From_id: string;\n\n    @Column({type: \"char\", length: 100})\n    message_to_id: string;\n\n    @Column({type: \"int\", width: 1})\n    message_type: number;\n\n    @Column({type: \"text\"})\n    message_content: string;\n\n    @Column({type: \"char\", length: 20})\n    message_content_type: string;\n\n    @Column({type: \"datetime\"})\n    message_created_time: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"modules/ModelsModule.html":{"url":"modules/ModelsModule.html","title":"module - ModelsModule","body":"\n                   \n\n\n\n\n    模块列表\n    ModelsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ModelsModule\n\n\n\ncluster_ModelsModule_imports\n\n\n\ncluster_ModelsModule_exports\n\n\n\ncluster_ModelsModule_providers\n\n\n\n\nConnectionModule\n\nConnectionModule\n\n\n\nModelsModule\n\nModelsModule\n\nModelsModule -->\n\nConnectionModule->ModelsModule\n\n\n\n\n\nExpressionService \n\nExpressionService \n\nExpressionService  -->\n\nModelsModule->ExpressionService \n\n\n\n\n\nGroupRelationshipService \n\nGroupRelationshipService \n\nGroupRelationshipService  -->\n\nModelsModule->GroupRelationshipService \n\n\n\n\n\nGroupService \n\nGroupService \n\nGroupService  -->\n\nModelsModule->GroupService \n\n\n\n\n\nPreferSettingService \n\nPreferSettingService \n\nPreferSettingService  -->\n\nModelsModule->PreferSettingService \n\n\n\n\n\nRandomAvatarsService \n\nRandomAvatarsService \n\nRandomAvatarsService  -->\n\nModelsModule->RandomAvatarsService \n\n\n\n\n\nSocketService \n\nSocketService \n\nSocketService  -->\n\nModelsModule->SocketService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nModelsModule->UserService \n\n\n\n\n\nExpressionService\n\nExpressionService\n\nModelsModule -->\n\nExpressionService->ModelsModule\n\n\n\n\n\nGroupRelationshipService\n\nGroupRelationshipService\n\nModelsModule -->\n\nGroupRelationshipService->ModelsModule\n\n\n\n\n\nGroupService\n\nGroupService\n\nModelsModule -->\n\nGroupService->ModelsModule\n\n\n\n\n\nPreferSettingService\n\nPreferSettingService\n\nModelsModule -->\n\nPreferSettingService->ModelsModule\n\n\n\n\n\nRandomAvatarsService\n\nRandomAvatarsService\n\nModelsModule -->\n\nRandomAvatarsService->ModelsModule\n\n\n\n\n\nSocketService\n\nSocketService\n\nModelsModule -->\n\nSocketService->ModelsModule\n\n\n\n\n\nUserService\n\nUserService\n\nModelsModule -->\n\nUserService->ModelsModule\n\n\n\n\n\n\n    \n    \n    \n        放大\n        重置\n        缩小\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            文件\n        \n        \n            src/typeorm/models/models.module.ts\n        \n\n\n\n\n        \n            \n                \n                    提供商列表\n                    \n                        \n                            ExpressionService\n                        \n                        \n                            GroupRelationshipService\n                        \n                        \n                            GroupService\n                        \n                        \n                            PreferSettingService\n                        \n                        \n                            RandomAvatarsService\n                        \n                        \n                            SocketService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    引入\n                    \n                        \n                            ConnectionModule\n                        \n                    \n                \n                \n                    导出\n                    \n                        \n                            ExpressionService\n                        \n                        \n                            GroupRelationshipService\n                        \n                        \n                            GroupService\n                        \n                        \n                            PreferSettingService\n                        \n                        \n                            RandomAvatarsService\n                        \n                        \n                            SocketService\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport {ConnectionModule} from \"../connection/connection.module\";\nimport {modelsProviders} from \"./models.providers\";\nimport {modelsServices} from \"./models.services\";\n\n@Module({\n    imports: [ConnectionModule],\n    providers: [...modelsProviders,...modelsServices],\n    exports: [...modelsServices]\n})\nexport class ModelsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/PreferSetting.html":{"url":"classes/PreferSetting.html","title":"class - PreferSetting","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  PreferSetting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/prefer_setting.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                desktop_reminder\n                            \n                            \n                                prefer_setting_id\n                            \n                            \n                                theme_id\n                            \n                            \n                                tone_id\n                            \n                            \n                                tone_if\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            desktop_reminder\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/prefer_setting.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            prefer_setting_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/prefer_setting.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/prefer_setting.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tone_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/prefer_setting.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tone_if\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/prefer_setting.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity(\"prefer_setting\")\nexport class PreferSetting {\n    @Column({type: \"int\", width: 10})\n    @PrimaryGeneratedColumn()\n    prefer_setting_id: number;\n\n    @Column({type: \"int\", width: 10})\n    theme_id: number;\n\n    @Column({type: \"int\", width: 1})\n    tone_if: number;\n\n    @Column({type: \"int\", width: 10})\n    tone_id: number;\n\n    @Column({type: \"int\", width: 1})\n    desktop_reminder: number;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/PreferSettingService.html":{"url":"injectables/PreferSettingService.html","title":"injectable - PreferSettingService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  PreferSettingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/prefer_setting.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkPreferSettingExistence\n                            \n                            \n                                    Async\n                                createDefaultPreferSetting\n                            \n                            \n                                    Async\n                                updatePreferSetting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(preferSettingRepository: Repository)\n                    \n                \n                        \n                            \n                                被定义在 src/typeorm/models/services/prefer_setting.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        preferSettingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkPreferSettingExistence\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkPreferSettingExistence(checkOption: T)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/prefer_setting.service.ts:29\n                \n            \n\n            \n                \n                    类型参数 :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    checkOption\n                                    \n                                            T\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createDefaultPreferSetting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createDefaultPreferSetting()\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/prefer_setting.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        返回 :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePreferSetting\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePreferSetting(option: T, preferSettingContent: N)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/prefer_setting.service.ts:24\n                \n            \n\n            \n                \n                    类型参数 :\n                    \n                        T\n                        N\n                    \n                \n            \n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                            T\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    preferSettingContent\n                                    \n                                            N\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { PreferSetting } from \"../entities/prefer_setting.entity\";\n\n@Injectable()\nexport class PreferSettingService {\n    constructor(\n        @Inject(\"PREFERSETTING_REPOSITORY\")\n        private readonly preferSettingRepository: Repository\n    ) {}\n\n    // 为用户创建偏好设置（均为默认）并返回偏好设置ID\n    async createDefaultPreferSetting(): Promise {\n        let v = await this.preferSettingRepository.insert({\n            theme_id: 1,\n            tone_if: 1,\n            tone_id: 1,\n            desktop_reminder:1 \n        });\n        return v.identifiers[0].prefer_setting_id;\n    }\n\n    // 更新偏好设置信息\n    async updatePreferSetting(option: T, preferSettingContent: N) {\n        await this.preferSettingRepository.update(option,preferSettingContent);\n    }\n\n    // 检查偏好设置是否已经存在\n    async checkPreferSettingExistence(checkOption: T): Promise {\n        const count = await this.preferSettingRepository.count(checkOption);\n        return count === 0 ? false : true;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"interfaces/RandomAvatar.html":{"url":"interfaces/RandomAvatar.html","title":"interface - RandomAvatar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  接口\n  RandomAvatar\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/random_avatars.service.ts\n        \n\n\n\n        \n            索引\n            \n                \n                    \n                        \n                            属性列表\n                        \n                    \n                    \n                        \n                            \n                                \n                                        random_avatar_id\n                                \n                                \n                                        random_avatar_url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                属性列表\n                    \n                        \n                                \n                                    \n                                        \n                                        random_avatar_id\n                                    \n                                \n                                \n                                    \n                                        random_avatar_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        random_avatar_url\n                                    \n                                \n                                \n                                    \n                                        random_avatar_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\n\n\nimport { RandomAvatars } from \"../entities/random_avatars.entity\";\n\ninterface RandomAvatar {\n    random_avatar_id: number;\n    random_avatar_url: string;\n}\n\n\n@Injectable()\nexport class RandomAvatarsService {\n    constructor(\n        @Inject('RANDOMAVATARS_REPOSITORY') \n        private readonly randomAvatarsRepository: Repository\n    ) {}\n\n    async getRandomAvatarUrl(): Promise {\n        const count = await this.randomAvatarsRepository.count();\n        const randomNum =Math.floor(Math.random() * count + 1);\n        const avatarMes: RandomAvatar = (await this.randomAvatarsRepository.find({\n            skip: randomNum-1,\n            take: 1\n        }))[0]\n        return avatarMes.random_avatar_url;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/RandomAvatars.html":{"url":"classes/RandomAvatars.html","title":"class - RandomAvatars","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  RandomAvatars\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/random_avatars.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                random_avatar_id\n                            \n                            \n                                random_avatar_url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            random_avatar_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/random_avatars.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            random_avatar_url\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 255})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/random_avatars.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity('random_avatars')\nexport class RandomAvatars {\n    @Column({type: \"int\", width: 10})\n    @PrimaryGeneratedColumn()\n    random_avatar_id: number;\n\n    @Column({type: \"char\", length: 255})\n    random_avatar_url: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/RandomAvatarsService.html":{"url":"injectables/RandomAvatarsService.html","title":"injectable - RandomAvatarsService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  RandomAvatarsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/random_avatars.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRandomAvatarUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(randomAvatarsRepository: Repository)\n                    \n                \n                        \n                            \n                                被定义在 src/typeorm/models/services/random_avatars.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        randomAvatarsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRandomAvatarUrl\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRandomAvatarUrl()\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/random_avatars.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        返回 :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\n\n\nimport { RandomAvatars } from \"../entities/random_avatars.entity\";\n\ninterface RandomAvatar {\n    random_avatar_id: number;\n    random_avatar_url: string;\n}\n\n\n@Injectable()\nexport class RandomAvatarsService {\n    constructor(\n        @Inject('RANDOMAVATARS_REPOSITORY') \n        private readonly randomAvatarsRepository: Repository\n    ) {}\n\n    async getRandomAvatarUrl(): Promise {\n        const count = await this.randomAvatarsRepository.count();\n        const randomNum =Math.floor(Math.random() * count + 1);\n        const avatarMes: RandomAvatar = (await this.randomAvatarsRepository.find({\n            skip: randomNum-1,\n            take: 1\n        }))[0]\n        return avatarMes.random_avatar_url;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"controllers/RegisterController.html":{"url":"controllers/RegisterController.html","title":"controller - RegisterController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RegisterController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/register/register.controller.ts\n        \n\n            \n                字首\n            \n            \n                register\n            \n\n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(userName: string, password: string)\n                \n            \n\n            \n                \n                    装饰器列表 : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    被定义在 src/register/register.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from \"@nestjs/common\";\n\nimport {RegisterService} from \"./register.service\";\n\n\n\n@Controller('register')\nexport class RegisterController {\n    constructor(private readonly registerService: RegisterService) {}\n\n    @Post()\n    async register(@Body('userName') userName: string, @Body('password') password: string ) {\n        return await this.registerService.register(userName,password);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"modules/RegisterModule.html":{"url":"modules/RegisterModule.html","title":"module - RegisterModule","body":"\n                   \n\n\n\n\n    模块列表\n    RegisterModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegisterModule\n\n\n\ncluster_RegisterModule_imports\n\n\n\ncluster_RegisterModule_providers\n\n\n\n\nModelsModule\n\nModelsModule\n\n\n\nRegisterModule\n\nRegisterModule\n\nRegisterModule -->\n\nModelsModule->RegisterModule\n\n\n\n\n\nRegisterService\n\nRegisterService\n\nRegisterModule -->\n\nRegisterService->RegisterModule\n\n\n\n\n\n\n    \n    \n    \n        放大\n        重置\n        缩小\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            文件\n        \n        \n            src/register/register.module.ts\n        \n\n\n\n\n        \n            \n                \n                    提供商列表\n                    \n                        \n                            RegisterService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RegisterController\n                        \n                    \n                \n                \n                    引入\n                    \n                        \n                            ModelsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport {RegisterController} from \"./register.controller\";\nimport {RegisterService} from \"./register.service\";\n\nimport {ModelsModule} from \"../typeorm/models/models.module\";\n\n@Module({\n    controllers: [RegisterController],\n    providers: [RegisterService],\n    imports: [ModelsModule]\n})\nexport class RegisterModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/RegisterService.html":{"url":"injectables/RegisterService.html","title":"injectable - RegisterService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  RegisterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/register/register.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(randomAvatarService: RandomAvatarsService, userService: UserService, groupRelationshipService: GroupRelationshipService, groupService: GroupService)\n                    \n                \n                        \n                            \n                                被定义在 src/register/register.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        randomAvatarService\n                                                  \n                                                        \n                                                                        RandomAvatarsService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupRelationshipService\n                                                  \n                                                        \n                                                                        GroupRelationshipService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupService\n                                                  \n                                                        \n                                                                        GroupService\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(userName: string, password: string)\n                \n            \n\n\n            \n                \n                    被定义在 src/register/register.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from \"@nestjs/common\";\n\n// 引入bcrypt对密码进行加密\nimport * as bcrypt from \"bcryptjs\";\n\nimport { RandomAvatarsService } from \"../typeorm/models/services/random_avatars.service\";\nimport { UserService } from \"../typeorm/models/services/user.service\";\nimport { GroupRelationshipService } from \"../typeorm/models/services/group_relationship.service\";\nimport { GroupService } from \"../typeorm/models/services/_group.service\";\n\n\n@Injectable()\nexport class RegisterService {\n    constructor(\n        private readonly randomAvatarService: RandomAvatarsService,\n        private readonly userService: UserService,\n        private readonly groupRelationshipService: GroupRelationshipService,\n        private readonly groupService: GroupService\n    ) {}\n\n    async register(userName: string, password: string) {\n        const UserExistence = await this.userService.checkUserExistence({user_name: userName});\n        if(UserExistence) {\n            throw new HttpException('用户名已存在',HttpStatus.FORBIDDEN);\n        }\n        const saltPassword = await utils.genSaltPassword(password);\n        const randomAvatarUrl = await this.randomAvatarService.getRandomAvatarUrl();\n        const registerTime = new Date().toLocaleString();\n        const userState = 0;\n        const userBasicMes = await this.userService.userRegister({\n            user_name: userName,\n            user_saltPassword: saltPassword,\n            user_avatar: randomAvatarUrl,\n            user_reg_time: registerTime,\n            user_state: userState\n        })\n        const defaultGroup = await this.groupService.getDefaultGroup();\n        await this.groupRelationshipService.createGroupRelationship({\n            user_id: userBasicMes.user_id,\n            group_id: defaultGroup.group_id,\n            top_if: 0,\n            group_member_type: '管理员'\n        })\n        return {\n            error_code: 0,\n            message: \"注册成功\"\n        }\n    }\n}\n\nnamespace utils {\n    // 加密轮数\n    const saltRounds = 10;\n\n    // 生成加盐后的密码\n    export async function genSaltPassword(pass: string): Promise {\n        const salt = await bcrypt.genSalt(saltRounds);\n        const hash = await bcrypt.hash(pass,salt);\n        return hash;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"interfaces/RegisterUserMes.html":{"url":"interfaces/RegisterUserMes.html","title":"interface - RegisterUserMes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  接口\n  RegisterUserMes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/user.service.ts\n        \n\n\n\n        \n            索引\n            \n                \n                    \n                        \n                            属性列表\n                        \n                    \n                    \n                        \n                            \n                                \n                                        user_avatar\n                                \n                                \n                                        user_name\n                                \n                                \n                                        user_reg_time\n                                \n                                \n                                        user_saltPassword\n                                \n                                \n                                        user_state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                属性列表\n                    \n                        \n                                \n                                    \n                                        \n                                        user_avatar\n                                    \n                                \n                                \n                                    \n                                        user_avatar:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_name\n                                    \n                                \n                                \n                                    \n                                        user_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_reg_time\n                                    \n                                \n                                \n                                    \n                                        user_reg_time:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_saltPassword\n                                    \n                                \n                                \n                                    \n                                        user_saltPassword:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_state\n                                    \n                                \n                                \n                                    \n                                        user_state:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\n\nimport * as bcrypt from \"bcryptjs\";\n\nimport { User } from \"../entities/user.entity\";\n\n\ninterface UserBasicMes {\n    user_id: string;\n    user_name: string;\n    user_avatar: string;\n    user_reg_time: string;\n    user_lastLogin_time: string;\n    user_state: number;\n    user_socketId: number;\n    user_preferSetting_id: number;\n}\n\ninterface RegisterUserMes {\n    user_name: string;\n    user_saltPassword: string;\n    user_avatar: string;\n    user_reg_time: string;\n    user_state: number;\n}\n\n@Injectable()\nexport class UserService {\n    constructor(@Inject('USER_REPOSITORY') private readonly userRepository: Repository){}\n\n    // 检查用户是否存在\n    async checkUserExistence(checkOption: T): Promise {\n        const count = await this.userRepository.count(checkOption);\n        return count === 0 ? false : true;\n    }\n\n    // 用户注册（向user表添加用户注册信息）并返回注册用户必要的基本信息\n    async userRegister(registerUserMes: RegisterUserMes): Promise {\n        await this.userRepository.insert(registerUserMes);\n        const userBasicMes = await this.getUserBasicMes({user_name: registerUserMes.user_name});\n        return userBasicMes;\n    }\n\n    // 检查用户密码与加密后的密码是否匹配\n    async checkUserPassword(userName: string,password: string): Promise {\n        let saltPassword = (await this.userRepository.findOne({\n            user_name: userName\n        })).user_saltPassword;\n        return await bcrypt.compare(password,saltPassword);\n    }\n\n    // 获取用户基本信息\n    async getUserBasicMes(option: T): Promise {\n        const user = await this.userRepository.findOne(option);\n        const userBasicMes: UserBasicMes = {\n            user_id: user.user_id,\n            user_name: user.user_name,\n            user_avatar: user.user_avatar,\n            user_reg_time: user.user_reg_time,\n            user_lastLogin_time: user.user_lastLogin_time,\n            user_state: user.user_state,\n            user_socketId: user.user_socketId,\n            user_preferSetting_id: user.user_preferSetting_id\n        }\n        return userBasicMes;\n    }\n\n    // 更新用户信息\n    async updateUser(option: T,updateContent: N) {\n        await this.userRepository.update(option,updateContent);\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/Socket.html":{"url":"classes/Socket.html","title":"class - Socket","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  Socket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/socket.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                ip\n                            \n                            \n                                socket_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/socket.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ip\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 30, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/socket.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            socket_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 100, unique: true, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/socket.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class Socket {\n    @Column({type: \"int\", width: 10})\n    @PrimaryGeneratedColumn()\n    _id: number;\n\n    @Column({type: \"char\", length: 100, unique: true, nullable: true})\n    socket_id: string;\n\n    @Column({type: \"char\", length: 30, nullable: true})\n    ip: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"modules/SocketModule.html":{"url":"modules/SocketModule.html","title":"module - SocketModule","body":"\n                   \n\n\n\n\n    模块列表\n    SocketModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SocketModule\n\n\n\ncluster_SocketModule_exports\n\n\n\ncluster_SocketModule_providers\n\n\n\n\nWebsocketService \n\nWebsocketService \n\n\n\nSocketModule\n\nSocketModule\n\nWebsocketService  -->\n\nSocketModule->WebsocketService \n\n\n\n\n\nWebsocketService\n\nWebsocketService\n\nSocketModule -->\n\nWebsocketService->SocketModule\n\n\n\n\n\n\n    \n    \n    \n        放大\n        重置\n        缩小\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            文件\n        \n        \n            src/websocket/websocket.module.ts\n        \n\n\n\n\n        \n            \n                \n                    提供商列表\n                    \n                        \n                            WebsocketService\n                        \n                    \n                \n                \n                    导出\n                    \n                        \n                            WebsocketService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\n\nimport { WebsocketService } from \"./websocket.service\";\n\n@Module({\n    providers: [WebsocketService],\n    exports: [WebsocketService]\n})\nexport class SocketModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/SocketService.html":{"url":"injectables/SocketService.html","title":"injectable - SocketService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  SocketService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/socket.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkSocketExistence\n                            \n                            \n                                    Async\n                                createSocket\n                            \n                            \n                                    Async\n                                updateSocket\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(socketRepository: Repository)\n                    \n                \n                        \n                            \n                                被定义在 src/typeorm/models/services/socket.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        socketRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkSocketExistence\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkSocketExistence(checkOption: T)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/socket.service.ts:24\n                \n            \n\n            \n                \n                    类型参数 :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    checkOption\n                                    \n                                            T\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createSocket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSocket(socketContent: T)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/socket.service.ts:13\n                \n            \n\n            \n                \n                    类型参数 :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    socketContent\n                                    \n                                            T\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateSocket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSocket(option: T, socketContent: N)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/socket.service.ts:19\n                \n            \n\n            \n                \n                    类型参数 :\n                    \n                        T\n                        N\n                    \n                \n            \n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                            T\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    socketContent\n                                    \n                                            N\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\nimport { Socket } from \"../entities/socket.entity\";\n\n@Injectable()\nexport class SocketService {\n    constructor(\n        @Inject(\"SOCKET_REPOSITORY\") \n        private readonly socketRepository: Repository\n    ) {}\n\n    // 为用户创建相关socket并返回id\n    async createSocket(socketContent: T): Promise {\n        let v = await this.socketRepository.insert(socketContent);\n        return v.identifiers[0]._id;\n    }\n\n    // 更新socket信息\n    async updateSocket(option: T,socketContent: N) {\n        await this.socketRepository.update(option,socketContent);\n    }\n\n    // 检查socket是否已经存在\n    async checkSocketExistence(checkOption: T): Promise {\n        const count = await this.socketRepository.count(checkOption);\n        return count === 0 ? false : true;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/Theme.html":{"url":"classes/Theme.html","title":"class - Theme","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  Theme\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/theme.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                frosted_glass_effect\n                            \n                            \n                                theme_background_url\n                            \n                            \n                                theme_color\n                            \n                            \n                                theme_font_color\n                            \n                            \n                                theme_id\n                            \n                            \n                                theme_opacity\n                            \n                            \n                                theme_type_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frosted_glass_effect\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/theme.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme_background_url\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 255})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/theme.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme_color\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'varchar', length: 10})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/theme.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme_font_color\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'varchar', length: 10})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/theme.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/theme.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme_opacity\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'float'})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/theme.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme_type_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/theme.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class Theme {\n    @Column({type: \"int\", width: 10})\n    @PrimaryGeneratedColumn()\n    theme_id: number;\n\n    @Column({type: \"int\", width: 1})\n    frosted_glass_effect: number;\n\n    @Column({type: \"char\", length: 255})\n    theme_background_url: string;\n\n    @Column({type: \"varchar\", length: 10})\n    theme_color: string;\n\n    @Column({type: \"varchar\", length: 10})\n    theme_font_color: string;\n\n    @Column({type: \"int\", width: 10})\n    theme_type_id: number;\n\n    @Column({type: \"float\"})\n    theme_opacity: number;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/ThemeType.html":{"url":"classes/ThemeType.html","title":"class - ThemeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  ThemeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/theme_type.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                theme_type_id\n                            \n                            \n                                theme_type_name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme_type_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/theme_type.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme_type_name\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 20})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/theme_type.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity(\"theme_type\")\nexport class ThemeType {\n    @Column({type: \"int\", width: 10})\n    @PrimaryGeneratedColumn()\n    theme_type_id: number;\n\n    @Column({type: \"char\", length: 20})\n    theme_type_name: string;\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/Tone.html":{"url":"classes/Tone.html","title":"class - Tone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  Tone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/tone.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                tone_id\n                            \n                            \n                                tone_name\n                            \n                            \n                                tone_url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tone_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10})@PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/tone.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tone_name\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 20})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/tone.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tone_url\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 255})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/tone.entity.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class Tone {\n    @Column({type: \"int\", width: 10})\n    @PrimaryGeneratedColumn()\n    tone_id: number;\n\n    @Column({type: \"char\", length: 20})\n    tone_name: string;\n\n    @Column({type: \"char\", length: 255})\n    tone_url: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  类列表\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/entities/user.entity.ts\n        \n\n\n\n\n\n            \n    索引\n    \n        \n                \n                    \n                        属性列表\n                    \n                \n                \n                    \n                        \n                            \n                                user_avatar\n                            \n                            \n                                user_id\n                            \n                            \n                                user_lastLogin_time\n                            \n                            \n                                user_name\n                            \n                            \n                                user_preferSetting_id\n                            \n                            \n                                user_reg_time\n                            \n                            \n                                user_saltPassword\n                            \n                            \n                                user_socketId\n                            \n                            \n                                user_state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            属性列表\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'char', length: 255})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/user.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'varchar', length: 100})@PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/user.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_lastLogin_time\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'datetime', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_name\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'varchar', length: 50, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/user.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_preferSetting_id\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10, unique: true, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/user.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_reg_time\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'datetime'})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_saltPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         string\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'varchar', length: 100})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_socketId\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 10, unique: true, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/user.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user_state\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            装饰器列表 : \n                            \n                            \n                                @Column({type: 'int', width: 1})\n                            \n                        \n                    \n                        \n                            \n                                    被定义在 src/typeorm/models/entities/user.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity,Column,PrimaryGeneratedColumn } from 'typeorm';\n\n\n@Entity()\nexport class User {\n    @Column({type: \"varchar\", length: 100})\n    @PrimaryGeneratedColumn(\"uuid\")\n    user_id: string;\n\n    @Column({type: \"varchar\", length: 50, unique: true})\n    user_name: string;\n\n    @Column({type: \"varchar\", length: 100})\n    user_saltPassword: string;\n\n    @Column({type: \"char\", length: 255})\n    user_avatar: string;\n\n    @Column({type: \"datetime\"})\n    user_reg_time: string;\n\n    @Column({type: \"datetime\", nullable: true})\n    user_lastLogin_time: string;\n\n    @Column({type: \"int\", width: 1})\n    user_state: number;\n\n    @Column({type: \"int\", width: 10, unique: true, nullable: true})\n    user_socketId: number;\n\n    @Column({type: \"int\", width: 10, unique: true, nullable: true})\n    user_preferSetting_id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"interfaces/UserBasicMes.html":{"url":"interfaces/UserBasicMes.html","title":"interface - UserBasicMes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  接口\n  UserBasicMes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/user.service.ts\n        \n\n\n\n        \n            索引\n            \n                \n                    \n                        \n                            属性列表\n                        \n                    \n                    \n                        \n                            \n                                \n                                        user_avatar\n                                \n                                \n                                        user_id\n                                \n                                \n                                        user_lastLogin_time\n                                \n                                \n                                        user_name\n                                \n                                \n                                        user_preferSetting_id\n                                \n                                \n                                        user_reg_time\n                                \n                                \n                                        user_socketId\n                                \n                                \n                                        user_state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                属性列表\n                    \n                        \n                                \n                                    \n                                        \n                                        user_avatar\n                                    \n                                \n                                \n                                    \n                                        user_avatar:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                    \n                                \n                                \n                                    \n                                        user_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_lastLogin_time\n                                    \n                                \n                                \n                                    \n                                        user_lastLogin_time:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_name\n                                    \n                                \n                                \n                                    \n                                        user_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_preferSetting_id\n                                    \n                                \n                                \n                                    \n                                        user_preferSetting_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_reg_time\n                                    \n                                \n                                \n                                    \n                                        user_reg_time:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_socketId\n                                    \n                                \n                                \n                                    \n                                        user_socketId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_state\n                                    \n                                \n                                \n                                    \n                                        user_state:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            类型 :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\n\nimport * as bcrypt from \"bcryptjs\";\n\nimport { User } from \"../entities/user.entity\";\n\n\ninterface UserBasicMes {\n    user_id: string;\n    user_name: string;\n    user_avatar: string;\n    user_reg_time: string;\n    user_lastLogin_time: string;\n    user_state: number;\n    user_socketId: number;\n    user_preferSetting_id: number;\n}\n\ninterface RegisterUserMes {\n    user_name: string;\n    user_saltPassword: string;\n    user_avatar: string;\n    user_reg_time: string;\n    user_state: number;\n}\n\n@Injectable()\nexport class UserService {\n    constructor(@Inject('USER_REPOSITORY') private readonly userRepository: Repository){}\n\n    // 检查用户是否存在\n    async checkUserExistence(checkOption: T): Promise {\n        const count = await this.userRepository.count(checkOption);\n        return count === 0 ? false : true;\n    }\n\n    // 用户注册（向user表添加用户注册信息）并返回注册用户必要的基本信息\n    async userRegister(registerUserMes: RegisterUserMes): Promise {\n        await this.userRepository.insert(registerUserMes);\n        const userBasicMes = await this.getUserBasicMes({user_name: registerUserMes.user_name});\n        return userBasicMes;\n    }\n\n    // 检查用户密码与加密后的密码是否匹配\n    async checkUserPassword(userName: string,password: string): Promise {\n        let saltPassword = (await this.userRepository.findOne({\n            user_name: userName\n        })).user_saltPassword;\n        return await bcrypt.compare(password,saltPassword);\n    }\n\n    // 获取用户基本信息\n    async getUserBasicMes(option: T): Promise {\n        const user = await this.userRepository.findOne(option);\n        const userBasicMes: UserBasicMes = {\n            user_id: user.user_id,\n            user_name: user.user_name,\n            user_avatar: user.user_avatar,\n            user_reg_time: user.user_reg_time,\n            user_lastLogin_time: user.user_lastLogin_time,\n            user_state: user.user_state,\n            user_socketId: user.user_socketId,\n            user_preferSetting_id: user.user_preferSetting_id\n        }\n        return userBasicMes;\n    }\n\n    // 更新用户信息\n    async updateUser(option: T,updateContent: N) {\n        await this.userRepository.update(option,updateContent);\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/typeorm/models/services/user.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkUserExistence\n                            \n                            \n                                    Async\n                                checkUserPassword\n                            \n                            \n                                    Async\n                                getUserBasicMes\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                userRegister\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                被定义在 src/typeorm/models/services/user.service.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    参数列表 :\n                                    \n                                        \n                                            \n                                                名称\n                                                    类型\n                                                可选的\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            否\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkUserExistence\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkUserExistence(checkOption: T)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/user.service.ts:33\n                \n            \n\n            \n                \n                    类型参数 :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    checkOption\n                                    \n                                            T\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkUserPassword(userName: string, password: string)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/user.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserBasicMes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserBasicMes(option: T)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/user.service.ts:54\n                \n            \n\n            \n                \n                    类型参数 :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                            T\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(option: T, updateContent: N)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/user.service.ts:70\n                \n            \n\n            \n                \n                    类型参数 :\n                    \n                        T\n                        N\n                    \n                \n            \n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    option\n                                    \n                                            T\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                                \n                                    updateContent\n                                    \n                                            N\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            userRegister\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userRegister(registerUserMes: RegisterUserMes)\n                \n            \n\n\n            \n                \n                    被定义在 src/typeorm/models/services/user.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    类型\n                                    可选的\n                                \n                            \n                            \n                                \n                                    registerUserMes\n                                    \n                                                RegisterUserMes\n                                    \n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { Repository } from \"typeorm\";\n\nimport * as bcrypt from \"bcryptjs\";\n\nimport { User } from \"../entities/user.entity\";\n\n\ninterface UserBasicMes {\n    user_id: string;\n    user_name: string;\n    user_avatar: string;\n    user_reg_time: string;\n    user_lastLogin_time: string;\n    user_state: number;\n    user_socketId: number;\n    user_preferSetting_id: number;\n}\n\ninterface RegisterUserMes {\n    user_name: string;\n    user_saltPassword: string;\n    user_avatar: string;\n    user_reg_time: string;\n    user_state: number;\n}\n\n@Injectable()\nexport class UserService {\n    constructor(@Inject('USER_REPOSITORY') private readonly userRepository: Repository){}\n\n    // 检查用户是否存在\n    async checkUserExistence(checkOption: T): Promise {\n        const count = await this.userRepository.count(checkOption);\n        return count === 0 ? false : true;\n    }\n\n    // 用户注册（向user表添加用户注册信息）并返回注册用户必要的基本信息\n    async userRegister(registerUserMes: RegisterUserMes): Promise {\n        await this.userRepository.insert(registerUserMes);\n        const userBasicMes = await this.getUserBasicMes({user_name: registerUserMes.user_name});\n        return userBasicMes;\n    }\n\n    // 检查用户密码与加密后的密码是否匹配\n    async checkUserPassword(userName: string,password: string): Promise {\n        let saltPassword = (await this.userRepository.findOne({\n            user_name: userName\n        })).user_saltPassword;\n        return await bcrypt.compare(password,saltPassword);\n    }\n\n    // 获取用户基本信息\n    async getUserBasicMes(option: T): Promise {\n        const user = await this.userRepository.findOne(option);\n        const userBasicMes: UserBasicMes = {\n            user_id: user.user_id,\n            user_name: user.user_name,\n            user_avatar: user.user_avatar,\n            user_reg_time: user.user_reg_time,\n            user_lastLogin_time: user.user_lastLogin_time,\n            user_state: user.user_state,\n            user_socketId: user.user_socketId,\n            user_preferSetting_id: user.user_preferSetting_id\n        }\n        return userBasicMes;\n    }\n\n    // 更新用户信息\n    async updateUser(option: T,updateContent: N) {\n        await this.userRepository.update(option,updateContent);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"injectables/WebsocketService.html":{"url":"injectables/WebsocketService.html","title":"injectable - WebsocketService","body":"\n                   \n\n\n\n\n\n\n\n\n  可注入的\n  WebsocketService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            文件\n        \n        \n            src/websocket/websocket.service.ts\n        \n\n\n\n\n            \n    索引\n    \n        \n\n                \n                    \n                        方法\n                    \n                \n                \n                    \n                        \n                            \n                                getSocketId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    构造方法\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                被定义在 src/websocket/websocket.service.ts:4\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        方法\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSocketId\n                        \n                        \n                    \n                \n            \n            \n                \ngetSocketId()\n                \n            \n\n\n            \n                \n                    被定义在 src/websocket/websocket.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        返回 :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class WebsocketService {\n    constructor() {}\n\n    getSocketId(): string {\n        return;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    文档概览\n\n\n\n    \n\n\n\n    \n        \n            文件\n            类型\n            标识符\n            注释\n        \n    \n    \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/login/login.controller.ts\n            \n            controller\n            LoginController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/login/login.service.ts\n            \n            injectable\n            LoginService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/register/register.controller.ts\n            \n            controller\n            RegisterController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/register/register.service.ts\n            \n            injectable\n            RegisterService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/register/register.service.ts\n            \n            function\n            genSaltPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/register/register.service.ts\n            \n            variable\n            saltRounds\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/typeorm/config/orm.config.ts\n            \n            variable\n            ormConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/typeorm/connection/connection.provider.ts\n            \n            variable\n            connectionProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/_group.entity.ts\n            \n            class\n            Group\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/expression.entity.ts\n            \n            class\n            Expression\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/expression_collection.entity.ts\n            \n            class\n            ExpressionCollection\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/friendship.entity.ts\n            \n            class\n            Friendship\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/group_relationship.entity.ts\n            \n            class\n            GroupRelationship\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/message.entity.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/prefer_setting.entity.ts\n            \n            class\n            PreferSetting\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/random_avatars.entity.ts\n            \n            class\n            RandomAvatars\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/socket.entity.ts\n            \n            class\n            Socket\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/theme.entity.ts\n            \n            class\n            Theme\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/theme_type.entity.ts\n            \n            class\n            ThemeType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/tone.entity.ts\n            \n            class\n            Tone\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/typeorm/models/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/typeorm/models/models.providers.ts\n            \n            variable\n            modelsProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/typeorm/models/models.services.ts\n            \n            variable\n            modelsServices\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/_group.service.ts\n            \n            injectable\n            GroupService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/_group.service.ts\n            \n            interface\n            GroupMes\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/expression.service.ts\n            \n            injectable\n            ExpressionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/group_relationship.service.ts\n            \n            injectable\n            GroupRelationshipService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/group_relationship.service.ts\n            \n            interface\n            GroupRelationshipMes\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/prefer_setting.service.ts\n            \n            injectable\n            PreferSettingService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/random_avatars.service.ts\n            \n            injectable\n            RandomAvatarsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/random_avatars.service.ts\n            \n            interface\n            RandomAvatar\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/socket.service.ts\n            \n            injectable\n            SocketService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/user.service.ts\n            \n            interface\n            RegisterUserMes\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/typeorm/models/services/user.service.ts\n            \n            interface\n            UserBasicMes\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/websocket/websocket.service.ts\n            \n            injectable\n            WebsocketService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        依赖项\n    \n    \n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/platform-socket.io : ^6.10.13\n        \n            @nestjs/websockets : ^6.10.13\n        \n            @types/bcryptjs : ^2.4.2\n        \n            bcryptjs : ^2.4.3\n        \n            jwt-simple : ^0.5.6\n        \n            mysql : ^2.17.1\n        \n            node-gyp : ^5.0.6\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            typeorm : ^0.2.22\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  其他\n  函数\n\n\n\n    索引\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            genSaltPassword   (src/.../register.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/register/register.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            genSaltPassword\n                        \n                        \n                    \n                \n            \n            \n                \ngenSaltPassword(pass)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        参数列表 :\n                        \n                            \n                                \n                                    名称\n                                    可选的\n                                \n                            \n                            \n                                \n                                    pass\n\n                                    \n                                        否\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        返回 :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    模块列表\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        你的浏览器不支持SVG\n                                    \n                                \n                        \n                            查看\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        你的浏览器不支持SVG\n                                    \n                                \n                        \n                            查看\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConnectionModule\n                    \n                    \n                                \n                                    无数据显示\n                                \n                        \n                            查看\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoginModule\n                    \n                    \n                                \n                                    \n                                        你的浏览器不支持SVG\n                                    \n                                \n                        \n                            查看\n                        \n                    \n                \n            \n            \n                \n                    \n                        ModelsModule\n                    \n                    \n                                \n                                    \n                                        你的浏览器不支持SVG\n                                    \n                                \n                        \n                            查看\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegisterModule\n                    \n                    \n                                \n                                    \n                                        你的浏览器不支持SVG\n                                    \n                                \n                        \n                            查看\n                        \n                    \n                \n            \n            \n                \n                    \n                        SocketModule\n                    \n                    \n                                \n                                    \n                                        你的浏览器不支持SVG\n                                    \n                                \n                        \n                            查看\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    概述\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_LoginModule\n\n\n\ncluster_LoginModule_providers\n\n\n\ncluster_ModelsModule\n\n\n\ncluster_ModelsModule_imports\n\n\n\ncluster_ModelsModule_exports\n\n\n\ncluster_ModelsModule_providers\n\n\n\ncluster_RegisterModule\n\n\n\ncluster_RegisterModule_providers\n\n\n\ncluster_SocketModule\n\n\n\ncluster_SocketModule_exports\n\n\n\ncluster_SocketModule_providers\n\n\n\n\nLoginModule\n\nLoginModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nLoginModule->AppModule\n\n\n\n\n\nModelsModule\n\nModelsModule\n\nLoginModule -->\n\nModelsModule->LoginModule\n\n\n\n\n\nRegisterModule\n\nRegisterModule\n\nRegisterModule -->\n\nModelsModule->RegisterModule\n\n\n\nAppModule -->\n\nModelsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nModelsModule->AuthModule\n\n\n\n\n\nExpressionService \n\nExpressionService \n\nExpressionService  -->\n\nModelsModule->ExpressionService \n\n\n\n\n\nGroupRelationshipService \n\nGroupRelationshipService \n\nGroupRelationshipService  -->\n\nModelsModule->GroupRelationshipService \n\n\n\n\n\nGroupService \n\nGroupService \n\nGroupService  -->\n\nModelsModule->GroupService \n\n\n\n\n\nPreferSettingService \n\nPreferSettingService \n\nPreferSettingService  -->\n\nModelsModule->PreferSettingService \n\n\n\n\n\nRandomAvatarsService \n\nRandomAvatarsService \n\nRandomAvatarsService  -->\n\nModelsModule->RandomAvatarsService \n\n\n\n\n\nSocketService \n\nSocketService \n\nSocketService  -->\n\nModelsModule->SocketService \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nModelsModule->UserService \n\n\n\nAppModule -->\n\nRegisterModule->AppModule\n\n\n\nLoginModule -->\n\nAuthModule->LoginModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nLoginService\n\nLoginService\n\nLoginModule -->\n\nLoginService->LoginModule\n\n\n\n\n\nConnectionModule\n\nConnectionModule\n\nModelsModule -->\n\nConnectionModule->ModelsModule\n\n\n\n\n\nExpressionService\n\nExpressionService\n\nModelsModule -->\n\nExpressionService->ModelsModule\n\n\n\n\n\nGroupRelationshipService\n\nGroupRelationshipService\n\nModelsModule -->\n\nGroupRelationshipService->ModelsModule\n\n\n\n\n\nGroupService\n\nGroupService\n\nModelsModule -->\n\nGroupService->ModelsModule\n\n\n\n\n\nPreferSettingService\n\nPreferSettingService\n\nModelsModule -->\n\nPreferSettingService->ModelsModule\n\n\n\n\n\nRandomAvatarsService\n\nRandomAvatarsService\n\nModelsModule -->\n\nRandomAvatarsService->ModelsModule\n\n\n\n\n\nSocketService\n\nSocketService\n\nModelsModule -->\n\nSocketService->ModelsModule\n\n\n\n\n\nUserService\n\nUserService\n\nModelsModule -->\n\nUserService->ModelsModule\n\n\n\n\n\nRegisterService\n\nRegisterService\n\nRegisterModule -->\n\nRegisterService->RegisterModule\n\n\n\n\n\nWebsocketService \n\nWebsocketService \n\n\n\nSocketModule\n\nSocketModule\n\nWebsocketService  -->\n\nSocketModule->WebsocketService \n\n\n\n\n\nWebsocketService\n\nWebsocketService\n\nSocketModule -->\n\nWebsocketService->SocketModule\n\n\n\n\n\n\n    \n    \n    \n        放大\n        重置\n        缩小\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 模块列表\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 可注入的\n                \n            \n        \n        \n            \n                \n                    \n                    13 类列表\n                \n            \n        \n        \n            \n                \n                    \n                    5 接口\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  其他\n  变量\n\n\n\n    索引\n    \n        \n            \n                \n                    \n                        \n                            connectionProvider   (src/.../connection.provider.ts)\n                        \n                        \n                            jwtConfig   (src/.../config.ts)\n                        \n                        \n                            modelsProviders   (src/.../models.providers.ts)\n                        \n                        \n                            modelsServices   (src/.../models.services.ts)\n                        \n                        \n                            ormConfig   (src/.../orm.config.ts)\n                        \n                        \n                            saltRounds   (src/.../register.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/typeorm/connection/connection.provider.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            connectionProvider\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         object\n\n                        \n                    \n                    \n                        \n                            缺省值 : {\n    provide: 'DATABASE_CONNECTION',\n    useFactory: async () => await createConnection(ormConfig)\n}\n                        \n                    \n\n\n            \n        \n\n    src/config/config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         object\n\n                        \n                    \n                    \n                        \n                            缺省值 : {\n    tokenExpiresTime: 1000 * 60 * 60 * 24 * 7,\n    jwtSecret: 'AngelChatinSecret'\n}\n                        \n                    \n\n\n            \n        \n\n    src/typeorm/models/models.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modelsProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :     []\n\n                        \n                    \n                    \n                        \n                            缺省值 : [\n    {\n        provide: \"USER_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(User),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"GROUP_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(Group),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"SOCKET_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(Socket),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"EXPRESSION_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(Expression),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"THEME_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(Theme),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"THEMETYPE_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(ThemeType),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"TONE_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(Tone),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"MESSAGE_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(Message),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"PREFERSETTING_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(PreferSetting),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"FRIENDSHIP_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(Friendship),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"GROUPRELATIONSHIP_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(GroupRelationship),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"EXPRESSIONCOLLECTION_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(ExpressionCollection),\n        inject: ['DATABASE_CONNECTION']\n    },\n    {\n        provide: \"RANDOMAVATARS_REPOSITORY\",\n        useFactory: (connection: Connection) => connection.getRepository(RandomAvatars),\n        inject: ['DATABASE_CONNECTION']\n    },\n]\n                        \n                    \n\n\n            \n        \n\n    src/typeorm/models/models.services.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            modelsServices\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :     []\n\n                        \n                    \n                    \n                        \n                            缺省值 : [\n    UserService, \n    RandomAvatarsService, \n    GroupService,\n    GroupRelationshipService,\n    PreferSettingService,\n    SocketService,\n    ExpressionService\n]\n                        \n                    \n\n\n            \n        \n\n    src/typeorm/config/orm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ormConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :     ConnectionOptions\n\n                        \n                    \n                    \n                        \n                            缺省值 : {\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"root\",\n    password: \"zjb13777838499\",\n    database: \"chating\",\n    entities: [User,Group,Socket,Expression,Theme,ThemeType,Tone,Message,PreferSetting,Friendship,GroupRelationship,ExpressionCollection,RandomAvatars],\n    synchronize: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/register/register.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            saltRounds\n                            \n                        \n                    \n                \n                    \n                        \n                            类型 :         number\n\n                        \n                    \n                    \n                        \n                            缺省值 : 10\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        无匹配的结果 \"\"\n    \n\n"}}
}
